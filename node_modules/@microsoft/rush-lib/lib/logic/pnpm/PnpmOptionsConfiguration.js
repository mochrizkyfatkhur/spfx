"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PnpmOptionsConfiguration = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const BasePackageManagerOptionsConfiguration_1 = require("../base/BasePackageManagerOptionsConfiguration");
const EnvironmentConfiguration_1 = require("../../api/EnvironmentConfiguration");
/**
 * Options that are only used when the PNPM package manager is selected.
 * Use this class to load "common/config/rush/pnpm-config.json" file,
 * or, load json from "pnpmOptions" field in "rush.json" for legacy support.
 *
 * @remarks
 * It is valid to define these options in rush.json even if the PNPM package manager
 * is not being used.
 *
 * @public
 */
class PnpmOptionsConfiguration extends BasePackageManagerOptionsConfiguration_1.PackageManagerOptionsConfigurationBase {
    constructor(json, commonTempFolder) {
        super(json);
        this.pnpmStore = json.pnpmStore || 'local';
        if (EnvironmentConfiguration_1.EnvironmentConfiguration.pnpmStorePathOverride) {
            this.pnpmStorePath = EnvironmentConfiguration_1.EnvironmentConfiguration.pnpmStorePathOverride;
        }
        else if (this.pnpmStore === 'global') {
            this.pnpmStorePath = '';
        }
        else {
            this.pnpmStorePath = `${commonTempFolder}/pnpm-store`;
        }
        this.strictPeerDependencies = !!json.strictPeerDependencies;
        this.preventManualShrinkwrapChanges = !!json.preventManualShrinkwrapChanges;
        this.useWorkspaces = !!json.useWorkspaces;
        this.globalOverrides = json.globalOverrides;
        this.globalPeerDependencyRules = json.globalPeerDependencyRules;
        this.globalPackageExtensions = json.globalPackageExtensions;
        this.globalNeverBuiltDependencies = json.globalNeverBuiltDependencies;
        this.globalAllowedDeprecatedVersions = json.globalAllowedDeprecatedVersions;
        this.unsupportedPackageJsonSettings = json.unsupportedPackageJsonSettings;
    }
    /** @internal */
    static loadFromJsonFileOrThrow(jsonFilename, commonTempFolder) {
        const pnpmOptionJson = node_core_library_1.JsonFile.loadAndValidate(jsonFilename, PnpmOptionsConfiguration._jsonSchema);
        return new PnpmOptionsConfiguration(pnpmOptionJson || {}, commonTempFolder);
    }
    /** @internal */
    static loadFromJsonObject(json, commonTempFolder) {
        return new PnpmOptionsConfiguration(json, commonTempFolder);
    }
}
exports.PnpmOptionsConfiguration = PnpmOptionsConfiguration;
PnpmOptionsConfiguration._jsonSchema = node_core_library_1.JsonSchema.fromFile(path.resolve(__dirname, '../../schemas/pnpm-config.schema.json'));
//# sourceMappingURL=PnpmOptionsConfiguration.js.map