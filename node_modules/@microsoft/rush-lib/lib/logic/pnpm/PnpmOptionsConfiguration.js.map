{"version":3,"file":"PnpmOptionsConfiguration.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmOptionsConfiguration.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,oEAAoE;AACpE,2GAGwD;AACxD,iFAA8E;AA6E9E;;;;;;;;;;GAUG;AACH,MAAa,wBAAyB,SAAQ,+EAAsC;IAkJlF,YAAoB,IAAsB,EAAE,gBAAwB;QAClE,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,OAAO,CAAC;QAC3C,IAAI,mDAAwB,CAAC,qBAAqB,EAAE;YAClD,IAAI,CAAC,aAAa,GAAG,mDAAwB,CAAC,qBAAqB,CAAC;SACrE;aAAM,IAAI,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE;YACtC,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;SACzB;aAAM;YACL,IAAI,CAAC,aAAa,GAAG,GAAG,gBAAgB,aAAa,CAAC;SACvD;QACD,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC;QAC5D,IAAI,CAAC,8BAA8B,GAAG,CAAC,CAAC,IAAI,CAAC,8BAA8B,CAAC;QAC5E,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;QAE1C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAC5C,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,yBAAyB,CAAC;QAChE,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAC5D,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,4BAA4B,CAAC;QACtE,IAAI,CAAC,+BAA+B,GAAG,IAAI,CAAC,+BAA+B,CAAC;QAC5E,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,8BAA8B,CAAC;IAC5E,CAAC;IAED,gBAAgB;IACT,MAAM,CAAC,uBAAuB,CACnC,YAAoB,EACpB,gBAAwB;QAExB,MAAM,cAAc,GAAqB,4BAAQ,CAAC,eAAe,CAC/D,YAAY,EACZ,wBAAwB,CAAC,WAAW,CACrC,CAAC;QACF,OAAO,IAAI,wBAAwB,CAAC,cAAc,IAAI,EAAE,EAAE,gBAAgB,CAAC,CAAC;IAC9E,CAAC;IAED,gBAAgB;IACT,MAAM,CAAC,kBAAkB,CAAC,IAAsB,EAAE,gBAAwB;QAC/E,OAAO,IAAI,wBAAwB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;IAC9D,CAAC;;AAvLH,4DAwLC;AAvLgB,oCAAW,GAAe,8BAAU,CAAC,QAAQ,CAC1D,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,uCAAuC,CAAC,CACjE,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { JsonFile, JsonSchema } from '@rushstack/node-core-library';\nimport {\n  IPackageManagerOptionsJsonBase,\n  PackageManagerOptionsConfigurationBase\n} from '../base/BasePackageManagerOptionsConfiguration';\nimport { EnvironmentConfiguration } from '../../api/EnvironmentConfiguration';\n\n/**\n * This represents the available PNPM store options\n * @public\n */\nexport type PnpmStoreOptions = 'local' | 'global';\n\n/**\n * @beta\n */\nexport interface IPnpmPeerDependencyRules {\n  ignoreMissing?: string[];\n  allowAny?: string[];\n  allowedVersions?: Record<string, string>;\n}\n\nexport interface IPnpmPeerDependenciesMeta {\n  [packageName: string]: {\n    optional?: boolean;\n  };\n}\n\nexport interface IPnpmPackageExtension {\n  dependencies?: Record<string, string>;\n  optionalDependencies?: Record<string, string>;\n  peerDependencies?: Record<string, string>;\n  peerDependenciesMeta?: IPnpmPeerDependenciesMeta;\n}\n\n/**\n * Part of IRushConfigurationJson.\n * @internal\n */\nexport interface IPnpmOptionsJson extends IPackageManagerOptionsJsonBase {\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.pnpmStore}\n   */\n  pnpmStore?: PnpmStoreOptions;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.strictPeerDependencies}\n   */\n  strictPeerDependencies?: boolean;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.preventManualShrinkwrapChanges}\n   */\n  preventManualShrinkwrapChanges?: boolean;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.useWorkspaces}\n   */\n  useWorkspaces?: boolean;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.globalOverrides}\n   */\n  globalOverrides?: Record<string, string>;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.globalPeerDependencyRules}\n   */\n  globalPeerDependencyRules?: IPnpmPeerDependencyRules;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.globalPackageExtensions}\n   */\n  globalPackageExtensions?: Record<string, IPnpmPackageExtension>;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.globalNeverBuiltDependencies}\n   */\n  globalNeverBuiltDependencies?: string[];\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.globalAllowedDeprecatedVersions}\n   */\n  globalAllowedDeprecatedVersions?: Record<string, string>;\n  /**\n   * {@inheritDoc PnpmOptionsConfiguration.unsupportedPackageJsonSettings}\n   */\n  unsupportedPackageJsonSettings?: unknown;\n}\n\n/**\n * Options that are only used when the PNPM package manager is selected.\n * Use this class to load \"common/config/rush/pnpm-config.json\" file,\n * or, load json from \"pnpmOptions\" field in \"rush.json\" for legacy support.\n *\n * @remarks\n * It is valid to define these options in rush.json even if the PNPM package manager\n * is not being used.\n *\n * @public\n */\nexport class PnpmOptionsConfiguration extends PackageManagerOptionsConfigurationBase {\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\n    path.resolve(__dirname, '../../schemas/pnpm-config.schema.json')\n  );\n\n  /**\n   * The method used to resolve the store used by PNPM.\n   *\n   * @remarks\n   * Available options:\n   *  - local: Use the standard Rush store path: common/temp/pnpm-store\n   *  - global: Use PNPM's global store path\n   */\n  public readonly pnpmStore: PnpmStoreOptions;\n\n  /**\n   * The path for PNPM to use as the store directory.\n   *\n   * Will be overridden by environment variable RUSH_PNPM_STORE_PATH\n   */\n  public readonly pnpmStorePath: string;\n\n  /**\n   * If true, then Rush will add the \"--strict-peer-dependencies\" option when invoking PNPM.\n   *\n   * @remarks\n   * This causes \"rush install\" to fail if there are unsatisfied peer dependencies, which is\n   * an invalid state that can cause build failures or incompatible dependency versions.\n   * (For historical reasons, JavaScript package managers generally do not treat this invalid state\n   * as an error.)\n   *\n   * The default value is false.  (For now.)\n   */\n  public readonly strictPeerDependencies: boolean;\n\n  /**\n   * If true, then `rush install` will report an error if manual modifications\n   * were made to the PNPM shrinkwrap file without running `rush update` afterwards.\n   *\n   * @remarks\n   * This feature protects against accidental inconsistencies that may be introduced\n   * if the PNPM shrinkwrap file (`pnpm-lock.yaml`) is manually edited.  When this\n   * feature is enabled, `rush update` will write a hash of the shrinkwrap contents to repo-state.json,\n   * and then `rush update` and `rush install` will validate the hash.  Note that this does not prohibit\n   * manual modifications, but merely requires `rush update` be run\n   * afterwards, ensuring that PNPM can report or repair any potential inconsistencies.\n   *\n   * To temporarily disable this validation when invoking `rush install`, use the\n   * `--bypass-policy` command-line parameter.\n   *\n   * The default value is false.\n   */\n  public readonly preventManualShrinkwrapChanges: boolean;\n\n  /**\n   * If true, then Rush will use the workspaces feature to install and link packages when invoking PNPM.\n   *\n   * @remarks\n   * The default value is true.  (For now.)\n   */\n  public readonly useWorkspaces: boolean;\n\n  /**\n   * The \"globalOverrides\" setting provides a simple mechanism for overriding version selections\n   * for all dependencies of all projects in the monorepo workspace.  The settings are copied\n   * into the `pnpm.overrides` field of the `common/temp/package.json` file that is generated\n   * by Rush during installation.\n   *\n   * Order of precedence: `.pnpmfile.cjs` has the highest precedence, followed by\n   * `unsupportedPackageJsonSettings`, `globalPeerDependencyRules`, `globalPackageExtensions`,\n   * and `globalOverrides` has lowest precedence.\n   *\n   * PNPM documentation: https://pnpm.io/package_json#pnpmoverrides\n   */\n  public readonly globalOverrides: Record<string, string> | undefined;\n\n  /**\n   * The `globalPeerDependencyRules` setting provides various settings for suppressing validation errors\n   * that are reported during installation with `strictPeerDependencies=true`.  The settings are copied\n   * into the `pnpm.peerDependencyRules` field of the `common/temp/package.json` file that is generated\n   * by Rush during installation.\n   *\n   * Order of precedence: `.pnpmfile.cjs` has the highest precedence, followed by\n   * `unsupportedPackageJsonSettings`, `globalPeerDependencyRules`, `globalPackageExtensions`,\n   * and `globalOverrides` has lowest precedence.\n   *\n   * https://pnpm.io/package_json#pnpmpeerdependencyrules\n   */\n  public readonly globalPeerDependencyRules: IPnpmPeerDependencyRules | undefined;\n\n  /**\n   * The `globalPackageExtension` setting provides a way to patch arbitrary package.json fields\n   * for any PNPM dependency of the monorepo.  The settings are copied into the `pnpm.packageExtensions`\n   * field of the `common/temp/package.json` file that is generated by Rush during installation.\n   * The `globalPackageExtension` setting has similar capabilities as `.pnpmfile.cjs` but without\n   * the downsides of an executable script (nondeterminism, unreliable caching, performance concerns).\n   *\n   * Order of precedence: `.pnpmfile.cjs` has the highest precedence, followed by\n   * `unsupportedPackageJsonSettings`, `globalPeerDependencyRules`, `globalPackageExtensions`,\n   * and `globalOverrides` has lowest precedence.\n   *\n   * PNPM documentation: https://pnpm.io/package_json#pnpmpackageextensions\n   */\n  public readonly globalPackageExtensions: Record<string, IPnpmPackageExtension> | undefined;\n\n  /**\n   * The `globalNeverBuiltDependencies` setting suppresses the `preinstall`, `install`, and `postinstall`\n   * lifecycle events for the specified NPM dependencies.  This is useful for scripts with poor practices\n   * such as downloading large binaries without retries or attempting to invoke OS tools such as\n   * a C++ compiler.  (PNPM's terminology refers to these lifecycle events as \"building\" a package;\n   * it has nothing to do with build system operations such as `rush build` or `rushx build`.)\n   * The settings are copied into the `pnpm.neverBuiltDependencies` field of the `common/temp/package.json`\n   * file that is generated by Rush during installation.\n   *\n   * PNPM documentation: https://pnpm.io/package_json#pnpmneverbuiltdependencies\n   */\n  public readonly globalNeverBuiltDependencies: string[] | undefined;\n\n  /**\n   * The `globalAllowedDeprecatedVersions` setting suppresses installation warnings for package\n   * versions that the NPM registry reports as being deprecated.  This is useful if the\n   * deprecated package is an indirect dependency of an external package that has not released a fix.\n   * The settings are copied into the `pnpm.allowedDeprecatedVersions` field of the `common/temp/package.json`\n   * file that is generated by Rush during installation.\n   *\n   * PNPM documentation: https://pnpm.io/package_json#pnpmalloweddeprecatedversions\n   *\n   * If you are working to eliminate a deprecated version, it's better to specify `allowedDeprecatedVersions`\n   * in the package.json file for individual Rush projects.\n   */\n  public readonly globalAllowedDeprecatedVersions: Record<string, string> | undefined;\n\n  /**\n   * (USE AT YOUR OWN RISK)  This is a free-form property bag that will be copied into\n   * the `common/temp/package.json` file that is generated by Rush during installation.\n   * This provides a way to experiment with new PNPM features.  These settings will override\n   * any other Rush configuration associated with a given JSON field except for `.pnpmfile.cjs`.\n   *\n   * USAGE OF THIS SETTING IS NOT SUPPORTED BY THE RUSH MAINTAINERS AND MAY CAUSE RUSH\n   * TO MALFUNCTION.  If you encounter a missing PNPM setting that you believe should\n   * be supported, please create a GitHub issue or PR.  Note that Rush does not aim to\n   * support every possible PNPM setting, but rather to promote a battle-tested installation\n   * strategy that is known to provide a good experience for large teams with lots of projects.\n   */\n  public readonly unsupportedPackageJsonSettings: unknown | undefined;\n\n  private constructor(json: IPnpmOptionsJson, commonTempFolder: string) {\n    super(json);\n    this.pnpmStore = json.pnpmStore || 'local';\n    if (EnvironmentConfiguration.pnpmStorePathOverride) {\n      this.pnpmStorePath = EnvironmentConfiguration.pnpmStorePathOverride;\n    } else if (this.pnpmStore === 'global') {\n      this.pnpmStorePath = '';\n    } else {\n      this.pnpmStorePath = `${commonTempFolder}/pnpm-store`;\n    }\n    this.strictPeerDependencies = !!json.strictPeerDependencies;\n    this.preventManualShrinkwrapChanges = !!json.preventManualShrinkwrapChanges;\n    this.useWorkspaces = !!json.useWorkspaces;\n\n    this.globalOverrides = json.globalOverrides;\n    this.globalPeerDependencyRules = json.globalPeerDependencyRules;\n    this.globalPackageExtensions = json.globalPackageExtensions;\n    this.globalNeverBuiltDependencies = json.globalNeverBuiltDependencies;\n    this.globalAllowedDeprecatedVersions = json.globalAllowedDeprecatedVersions;\n    this.unsupportedPackageJsonSettings = json.unsupportedPackageJsonSettings;\n  }\n\n  /** @internal */\n  public static loadFromJsonFileOrThrow(\n    jsonFilename: string,\n    commonTempFolder: string\n  ): PnpmOptionsConfiguration {\n    const pnpmOptionJson: IPnpmOptionsJson = JsonFile.loadAndValidate(\n      jsonFilename,\n      PnpmOptionsConfiguration._jsonSchema\n    );\n    return new PnpmOptionsConfiguration(pnpmOptionJson || {}, commonTempFolder);\n  }\n\n  /** @internal */\n  public static loadFromJsonObject(json: IPnpmOptionsJson, commonTempFolder: string): PnpmOptionsConfiguration {\n    return new PnpmOptionsConfiguration(json, commonTempFolder);\n  }\n}\n"]}