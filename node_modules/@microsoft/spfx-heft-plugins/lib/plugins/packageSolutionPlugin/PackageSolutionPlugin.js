"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageSolutionPlugin = void 0;
const PluginNames = __importStar(require("../PluginNames"));
const SolutionPackager_1 = require("./SolutionPackager");
const ACTION_NAME = 'package-solution';
/**
 * @internal
 */
class PackageSolutionPlugin {
    constructor() {
        this.pluginName = PluginNames.PackageSolutionPlugin;
    }
    apply(heftSession, heftConfiguration) {
        heftSession.registerAction({
            actionName: ACTION_NAME,
            documentation: 'Package the project into a SPPKG',
            parameters: {
                production: {
                    kind: 'flag',
                    parameterLongName: '--production',
                    description: 'If specified, package the solution in production mode.'
                }
            },
            callback: async (options) => {
                const logger = heftSession.requestScopedLogger(ACTION_NAME);
                const solutionPackager = new SolutionPackager_1.SolutionPackager({
                    buildFolder: heftConfiguration.buildFolder,
                    terminal: heftConfiguration.globalTerminal,
                    emitError: logger.emitError.bind(logger),
                    emitWarning: logger.emitWarning.bind(logger)
                });
                await solutionPackager.packageSolutionAsync(options.production);
            }
        });
        heftSession.hooks.clean.tap(PluginNames.PackageSolutionPlugin, (clean) => {
            clean.hooks.loadStageConfiguration.tapPromise(PluginNames.PackageSolutionPlugin, async () => {
                const logger = heftSession.requestScopedLogger(ACTION_NAME);
                const solutionPackager = new SolutionPackager_1.SolutionPackager({
                    buildFolder: heftConfiguration.buildFolder,
                    terminal: logger.terminal,
                    emitError: logger.emitError.bind(logger),
                    emitWarning: logger.emitWarning.bind(logger)
                });
                const cleanPaths = await solutionPackager.getCleanPathsAsync();
                for (const cleanPath of cleanPaths) {
                    clean.properties.pathsToDelete.add(cleanPath);
                }
            });
        });
    }
}
exports.PackageSolutionPlugin = PackageSolutionPlugin;
exports.default = new PackageSolutionPlugin();
//# sourceMappingURL=PackageSolutionPlugin.js.map