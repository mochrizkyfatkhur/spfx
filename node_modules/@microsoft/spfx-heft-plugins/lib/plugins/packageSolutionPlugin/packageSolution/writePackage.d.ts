/**
 * @file writePackage.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Writes a package xml object to disk, in both raw and zipped format
 */
import JSZip from 'jszip';
import { Terminal } from '@rushstack/node-core-library';
import IFile from './models/packageXml/IFile';
import IOpenDocumentConventionXml from './models/packageXml/IOpenDocumentConventionXml';
import IPackageXml from './models/packageXml/IPackageXml';
import IFeatureXml from './models/packageXml/IFeatureXml';
import IIcon from './models/packageXml/IIcon';
import { IPackageSolutionConfig } from '../SolutionPackager';
/**
 * Writes the ISolutionXml object containing the solution package xml to the disk using provided config
 */
export declare function writePackageAsync(terminal: Terminal, solution: IPackageXml, config: IPackageSolutionConfig): Promise<void>;
/**
 * Ensures that the contents of config.paths.debugDir have been deleted
 */
export declare function cleanRawPackageDirectoryAsync(terminal: Terminal, config: IPackageSolutionConfig): Promise<void>;
export declare function writeFeatureAsync(terminal: Terminal, feature: IFeatureXml, config: IPackageSolutionConfig, zip: JSZip): Promise<void>;
/**
 * Write the app icon related files: The icon file itself, and the config.xml
 * If there is no icon it does nothing.
 * If the icon path is invalid, it throws an error.
 */
export declare function writeIconAsync(terminal: Terminal, icon: IIcon, config: IPackageSolutionConfig, zip: JSZip): Promise<void>;
export declare function writeXmlFileAsync(terminal: Terminal, file: IFile, config: IPackageSolutionConfig, zip: JSZip): Promise<void>;
export declare function writeODCFileAsync(terminal: Terminal, file: IOpenDocumentConventionXml, config: IPackageSolutionConfig, zip: JSZip): Promise<void>;
//# sourceMappingURL=writePackage.d.ts.map