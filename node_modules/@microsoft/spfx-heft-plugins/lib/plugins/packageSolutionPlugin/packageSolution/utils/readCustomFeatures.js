"use strict";
/**
 * @file readCustomFeatures.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Reads custom feature XML from folder specified by config. This function looks for all `.rels` files in
 * the `/_rels` folder, assumes that a Feature.xml file of the same name exists in the root folder. It
 * returns an object with a list of IFile files to include in the package, as well as the paths to all the
 * feature.xml files, which is later referenced by the `AppManifest.xml.rels` file, thereby including the
 * custom feature in the package.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readCustomFeaturesAsync = void 0;
const path = require("path");
const constants_1 = __importDefault(require("../config/constants"));
const getFiles_1 = require("./getFiles");
/**
 * Reads custom feature XML from folder specified by config. This function looks for all `.rels` files in
 * the `/_rels` folder, assumes that a Feature.xml file of the same name exists in the root folder. It
 * returns an object with a list of IFile files to include in the package, as well as the paths to all the
 * feature.xml files, which is later referenced by the `AppManifest.xml.rels` file, thereby including the
 * custom feature in the package.
 * @todo we allow multiple featureXML globs to be specified
 */
async function readCustomFeaturesAsync(terminal, options) {
    const filenames = await getCustomFeatureXmlFilenamesAsync(terminal, options.paths.featureXmlDir);
    const files = await getCustomFilesAsync(terminal, options.paths.featureXmlDir);
    return {
        files: files,
        customFeatureFilepath: filenames
    };
}
exports.readCustomFeaturesAsync = readCustomFeaturesAsync;
/** Reads the list of feature xml filenames from a specified rels folder */
async function getCustomFeatureXmlFilenamesAsync(terminal, featureXmlDir) {
    const filenames = await (0, getFiles_1.getRelativeFilePathsAsync)(terminal, path.join(featureXmlDir, constants_1.default.RelsFolder), `*${constants_1.default.RelsXml}`, 'Found custom feature file: ');
    return filenames.map((filename) => filename.replace(constants_1.default.RelsExtensionRegex, ''));
}
/** Loads a directory of files into IFile objects */
async function getCustomFilesAsync(terminal, featureXmlDir) {
    return await (0, getFiles_1.getFilesAsync)(terminal, featureXmlDir, '**/*.*', 'Found custom file: ');
}
//# sourceMappingURL=readCustomFeatures.js.map