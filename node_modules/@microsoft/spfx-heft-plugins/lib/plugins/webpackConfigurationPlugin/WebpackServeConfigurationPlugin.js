"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebpackServeConfigurationPlugin = void 0;
const path = __importStar(require("path"));
const express_1 = __importDefault(require("express"));
const PluginNames = __importStar(require("../PluginNames"));
const ConfigureServe_1 = require("./ConfigureServe");
const ServeInfoPlugin_1 = require("./webpackPlugins/ServeInfoPlugin");
const CumulativeManifestProcessor_1 = require("../../spfxManifests/cumulativeManifestProcessor/CumulativeManifestProcessor");
const constants_1 = require("../../utilities/constants");
/**
 * @public
 */
class WebpackServeConfigurationPlugin {
    constructor() {
        this.pluginName = PluginNames.SpfxWebpackServePlugin;
    }
    get accessor() {
        if (!this._accessor) {
            this._accessor = {
                properties: {}
            };
        }
        return this._accessor;
    }
    /**
     * Generate the Webpack Dev Server configuration for SPFx component development
     */
    apply(heftSession, heftConfiguration) {
        const logger = heftSession.requestScopedLogger('spfx-webpack-serve-plugin');
        const terminal = logger.terminal;
        const { buildFolder } = heftConfiguration;
        heftSession.hooks.build.tap(PluginNames.SpfxWebpackServePlugin, (build) => {
            if (build.properties.serveMode) {
                build.hooks.bundle.tap(PluginNames.SpfxWebpackServePlugin, (bundle) => {
                    bundle.hooks.configureWebpack.tapPromise(PluginNames.SpfxWebpackServePlugin, async (untypedConfig) => {
                        var _a, _b;
                        let config = untypedConfig;
                        if (!config) {
                            throw new Error('Serve mode is expecting a webpack config to use webpack dev server.');
                        }
                        // Webpack Dev Server will only consider the first config if multiple are defined.
                        if (Array.isArray(config)) {
                            config = config[0];
                        }
                        const serve = new ConfigureServe_1.ConfigureServe(heftConfiguration, terminal);
                        const serveConfig = serve.generateServeConfig();
                        // Project serve paths
                        const projectServeMap = new Map();
                        const { contentBasePublicPath = '/' } = serveConfig;
                        if (serveConfig.contentBase) {
                            if (Array.isArray(serveConfig.contentBase)) {
                                for (const contentPath of serveConfig.contentBase) {
                                    projectServeMap.set(path.resolve(buildFolder, contentPath), contentBasePublicPath);
                                }
                            }
                            else {
                                projectServeMap.set(path.resolve(buildFolder, serveConfig.contentBase), contentBasePublicPath);
                            }
                        }
                        else {
                            projectServeMap.set(path.resolve(buildFolder), contentBasePublicPath);
                        }
                        // Additional serve paths
                        const dependencyServeMap = this._getDependencyServeMap(buildFolder, terminal);
                        const additionalServePathsFromAccessor = await ((_b = (_a = this.accessor.properties).getAdditionalServePathsAsync) === null || _b === void 0 ? void 0 : _b.call(_a));
                        const serveMap = new Map([
                            ...projectServeMap,
                            ...dependencyServeMap,
                            ...(additionalServePathsFromAccessor || [])
                        ]);
                        // Webpack Dev Server config
                        config.devServer = {
                            static: false,
                            devMiddleware: {
                                publicPath: '/dist',
                                stats: {
                                    assets: false,
                                    chunks: false,
                                    modules: false,
                                    warningsFilter: [/export .* was not found in/]
                                },
                                writeToDisk: true
                            },
                            host: 'localhost',
                            port: serveConfig.port,
                            hot: true,
                            historyApiFallback: false,
                            compress: true,
                            allowedHosts: 'all',
                            headers: {
                                'Access-Control-Allow-Origin': '*',
                                'Access-Control-Allow-Methods': 'HEAD, GET, OPTIONS'
                            },
                            setupMiddlewares: (middlewares, server) => {
                                const { app } = server;
                                if (serveConfig.apiMap) {
                                    for (const [route, handler] of Object.entries(serveConfig.apiMap)) {
                                        // Don't include universal route handlers.
                                        if (route.startsWith('*')) {
                                            continue;
                                        }
                                        app.get(route, handler);
                                    }
                                }
                                middlewares.unshift(serve.logRequestsMiddleware());
                                for (const [contentPath, route] of serveMap) {
                                    middlewares.push({
                                        name: 'express-static',
                                        path: route,
                                        middleware: express_1.default.static(contentPath, { index: false })
                                    });
                                }
                                return middlewares;
                            },
                            open: serveConfig.initialPage
                        };
                        // Webpack Dev Server plugins
                        config.plugins = [
                            ...(config.plugins ? config.plugins : []),
                            new ServeInfoPlugin_1.ServeInfoPlugin({
                                terminal: terminal,
                                port: serveConfig.port,
                                tempFolderName: constants_1.DEFAULT_TEMP_FOLDER
                            })
                        ];
                        return config;
                    });
                });
            }
        });
    }
    _getDependencyServeMap(buildFolder, terminal) {
        const dependencyServeMap = new Map();
        const referencedProjects = this._getReferencedProjects(buildFolder, terminal);
        for (const versionMap of Object.values(referencedProjects)) {
            for (const referencedProject of Object.values(versionMap)) {
                if (referencedProject.packageName && !referencedProject.isAssembly) {
                    const projectOutputPath = path.dirname(referencedProject.manifestPath);
                    if (referencedProject.manifestPath) {
                        dependencyServeMap.set(projectOutputPath, '/');
                    }
                    else {
                        terminal.writeWarning(referencedProject.packageName + ' not found.');
                    }
                }
            }
        }
        return dependencyServeMap;
    }
    _getReferencedProjects(buildFolder, terminal) {
        const cumulativeManifestProcessor = new CumulativeManifestProcessor_1.CumulativeManifestProcessor({
            explicitInclude: [constants_1.SP_LOADER_ASSEMBLY_ID],
            rootPath: buildFolder,
            tempFolderName: constants_1.DEFAULT_TEMP_FOLDER,
            distFolderName: constants_1.DEFAULT_OUTPUT_FOLDER,
            includeAssemblies: true,
            terminal: terminal
        });
        const referencedProjects = cumulativeManifestProcessor.discoverManifests(buildFolder, CumulativeManifestProcessor_1.DependencyDiscoveryMode.deepSparseIgnoreFirstProject);
        return referencedProjects;
    }
}
exports.WebpackServeConfigurationPlugin = WebpackServeConfigurationPlugin;
exports.default = new WebpackServeConfigurationPlugin();
//# sourceMappingURL=WebpackServeConfigurationPlugin.js.map