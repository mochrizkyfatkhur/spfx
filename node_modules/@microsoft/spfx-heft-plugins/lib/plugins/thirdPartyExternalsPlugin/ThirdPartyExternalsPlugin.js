"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThirdPartyExternalsPlugin = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
const PluginNames = __importStar(require("../PluginNames"));
const WebpackConfigurationGenerator_1 = require("../webpackConfigurationPlugin/WebpackConfigurationGenerator");
const LegacyExternals_1 = require("./LegacyExternals");
/**
 * @internal
 */
class ThirdPartyExternalsPlugin {
    constructor() {
        this.pluginName = PluginNames.ThirdPartyExternalsPlugin;
    }
    apply(heftSession, heftConfiguration) {
        heftSession.hooks.build.tap(PluginNames.ThirdPartyExternalsPlugin, (build) => {
            build.hooks.bundle.tap(PluginNames.ThirdPartyExternalsPlugin, (bundleSubstage) => {
                bundleSubstage.hooks.configureWebpack.tap({ name: PluginNames.ThirdPartyExternalsPlugin, stage: Number.MAX_SAFE_INTEGER / 2 }, // Make sure this runs after the webpack configuration
                (untypedConfig) => {
                    const scopedLogger = heftSession.requestScopedLogger(PluginNames.ThirdPartyExternalsPlugin);
                    const config = untypedConfig;
                    if (!(config === null || config === void 0 ? void 0 : config[WebpackConfigurationGenerator_1.IS_SPFX_WEBPACK_CONFIGURATION_SYMBOL])) {
                        const thisPackageJson = node_core_library_1.PackageJsonLookup.loadOwnPackageJson(__dirname);
                        scopedLogger.emitError(new Error('A SPFx webpack configuration must have already been generated. Has ' +
                            `${PluginNames.SpfxWebpackConfigurationPlugin} in ${thisPackageJson.name} been applied?`));
                    }
                    else {
                        const configJson = config[WebpackConfigurationGenerator_1.CONFIG_JSON_SYMBOL];
                        const legacyExternals = new LegacyExternals_1.LegacyExternals({
                            configJson: configJson,
                            terminal: scopedLogger.terminal,
                            selectedLocales: build.properties.locales,
                            buildFolder: heftConfiguration.buildFolder,
                            serveMode: build.properties.serveMode,
                            production: build.properties.production
                        });
                        legacyExternals.updateWebpackConfiguration(config);
                    }
                    return config;
                });
            });
        });
    }
}
exports.ThirdPartyExternalsPlugin = ThirdPartyExternalsPlugin;
exports.default = new ThirdPartyExternalsPlugin();
//# sourceMappingURL=ThirdPartyExternalsPlugin.js.map