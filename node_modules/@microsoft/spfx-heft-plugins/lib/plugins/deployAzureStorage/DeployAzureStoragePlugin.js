"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployAzureStoragePlugin = void 0;
const glob_1 = __importDefault(require("glob"));
const heft_config_file_1 = require("@rushstack/heft-config-file");
const PluginNames = __importStar(require("../PluginNames"));
const node_core_library_1 = require("@rushstack/node-core-library");
const AzureUploader_1 = require("../../utilities/AzureUploader");
const ACTION_NAME = 'deploy-azure-storage';
/**
 * @internal
 */
class DeployAzureStoragePlugin {
    constructor() {
        this.pluginName = PluginNames.DeployAzureStoragePlugin;
    }
    static async deployToAzureAsync({ terminal, buildFolder, emitError, rigConfig, tryCreateContainer }) {
        const configFile = new heft_config_file_1.ConfigurationFile({
            projectRelativeFilePath: 'config/deploy-azure-storage.json',
            jsonSchemaPath: `${__dirname}/deploy-azure-storage.schema.json`
        });
        const config = (await configFile.tryLoadConfigurationFileForProjectAsync(terminal, buildFolder, rigConfig)) ||
            {};
        if (!config.workingDir) {
            config.workingDir = `${buildFolder}/release/assets`;
        }
        else {
            // Trim trailing slashes
            config.workingDir = config.workingDir.replace(/[\/\\]+$/, '');
        }
        if (!config.uploadPath) {
            config.uploadPath = '**/*';
        }
        if (!config.container) {
            emitError(new Error('Config file missing container name.'));
            return;
        }
        if (!config.account) {
            emitError(new Error('Config file missing Azure account name.'));
            return;
        }
        if (!config.accessKey) {
            emitError(new Error('Config file missing Azure access key.'));
            return;
        }
        terminal.writeLine(`Uploading files '${config.uploadPath}' from directory '${config.workingDir}' to Azure`);
        const files = await node_core_library_1.LegacyAdapters.convertCallbackToPromise(glob_1.default, config.uploadPath, {
            cwd: config.workingDir
        });
        const filesToUpload = files.map((filename) => {
            return {
                azurePath: filename,
                localPath: `${config.workingDir}/${filename}`
            };
        });
        const azureUploader = new AzureUploader_1.AzureUploader({
            storageAccountName: config.account,
            containerName: config.container,
            storageKey: config.accessKey
        });
        try {
            if (tryCreateContainer) {
                await azureUploader.ensureContainerExistsAsync(terminal);
            }
            await azureUploader.uploadFilesToAzureAsync(terminal, filesToUpload);
        }
        catch (e) {
            emitError(e);
        }
        terminal.writeLine(node_core_library_1.Colors.green('Upload complete!\n'));
        terminal.writeLine(`Access your files at: ${AzureUploader_1.AzureUploader.getStorageAccountUrl(config.account)}/${config.container}\n`);
    }
    apply(heftSession, heftConfiguration) {
        heftSession.registerAction({
            actionName: ACTION_NAME,
            documentation: 'Deploy the project to Azure Storage',
            parameters: {
                skipTryCreateContainer: {
                    kind: 'flag',
                    parameterLongName: '--skip-try-create-container',
                    description: 'If this flag is specified, skip trying to create the container'
                }
            },
            callback: async ({ skipTryCreateContainer }) => {
                const scopedLogger = heftSession.requestScopedLogger(ACTION_NAME);
                await DeployAzureStoragePlugin.deployToAzureAsync({
                    terminal: heftConfiguration.globalTerminal,
                    emitError: scopedLogger.emitError.bind(scopedLogger),
                    buildFolder: heftConfiguration.buildFolder,
                    rigConfig: heftConfiguration.rigConfig,
                    tryCreateContainer: !skipTryCreateContainer
                });
            }
        });
    }
}
exports.DeployAzureStoragePlugin = DeployAzureStoragePlugin;
exports.default = new DeployAzureStoragePlugin();
//# sourceMappingURL=DeployAzureStoragePlugin.js.map