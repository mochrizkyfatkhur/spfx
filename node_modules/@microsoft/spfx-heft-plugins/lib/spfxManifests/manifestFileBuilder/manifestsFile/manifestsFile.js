var MANIFESTS_ARRAY = MANIFESTS_ARRAY_PROXY;
/**
 * Get the manifest array.
 */
function getParameterByName(name) {
    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    var results = regex.exec(window.location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
}
/**
 * @internal
 */
export var _metadata = MANIFESTS_FILE_METADATA;
/**
 * @beta
 */
export function getManifests() {
    // tslint:disable-line:export-name
    // Clone manifestsArray
    // Reverse manifest compression
    function decompressManifests(key, value) {
        if (key === 'paths') {
            var compressedPaths = value;
            var expanded = {};
            // tslint:disable-next-line:forin
            for (var locale in compressedPaths.l) {
                expanded[locale] = "".concat(compressedPaths.p).concat(compressedPaths.l[locale]).concat(compressedPaths.s);
            }
            return expanded;
        }
        return value;
    }
    var manifests = JSON.parse(JSON.stringify(MANIFESTS_ARRAY), decompressManifests);
    var manifestsFileUrl = DEPLOYED_ASSET_PATH_OVERRIDE || __webpack_public_path__;
    var selectedLocale = getParameterByName('market') || getParameterByName('locale');
    if (selectedLocale) {
        selectedLocale = selectedLocale.toLowerCase();
    }
    if (!manifestsFileUrl) {
        console.error("Unable to determine ".concat(MANIFESTS_FILE_NAME, " file URL. Using default base URL. ") +
            'This is expected if you are running "gulp serve."');
    }
    for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
        var manifest = manifests_1[_i];
        var loaderConfig = manifest.loaderConfig;
        if (manifestsFileUrl) {
            if (!loaderConfig.internalModuleBaseUrls || loaderConfig.internalModuleBaseUrls.length === 0) {
                loaderConfig.internalModuleBaseUrls = [manifestsFileUrl];
            }
        }
        if (selectedLocale) {
            // tslint:disable-next-line:forin
            var scriptResources = loaderConfig.scriptResources;
            for (var _a = 0, _b = Object.keys(scriptResources); _a < _b.length; _a++) {
                var scriptResourceName = _b[_a];
                var scriptResource = scriptResources[scriptResourceName];
                if (scriptResource.type === 'localizedPath') {
                    // If this is a localized path resource, and a ?locale= or ?market= query parameter has been specified,
                    // only provide that resource
                    var locResource = scriptResource;
                    var paths = locResource.paths;
                    if (paths) {
                        for (var _c = 0, _d = Object.keys(paths); _c < _d.length; _c++) {
                            var localeName = _d[_c];
                            if (localeName.toLowerCase() === selectedLocale) {
                                locResource.defaultPath = paths[localeName];
                                delete locResource.paths;
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
    return manifests;
}
//# sourceMappingURL=manifestsFile.js.map