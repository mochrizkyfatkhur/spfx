"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManifestsFileBuilder = void 0;
const webpack_1 = __importDefault(require("webpack"));
const path = __importStar(require("path"));
const lodash_1 = require("lodash");
const set_webpack_public_path_plugin_1 = require("@rushstack/set-webpack-public-path-plugin");
const node_core_library_1 = require("@rushstack/node-core-library");
const webpack4_module_minifier_plugin_1 = require("@rushstack/webpack4-module-minifier-plugin");
/**
 * @internal
 */
class ManifestsFileBuilder {
    constructor(options) {
        this._terminal = options.terminal;
        this._manifestsFilePath = options.manifestsFilePath || `${__dirname}/manifestsFile/manifestsFile.js`;
    }
    async buildManifestsJsAsync(manifestsArray, outputFilePath, azurePathOverride, manifestsJsFileMetadata) {
        // Write the manifests.js file
        const webpackConfig = this._getManifestsFileWebpackConfig(manifestsArray, outputFilePath, azurePathOverride, manifestsJsFileMetadata);
        try {
            const stats = await node_core_library_1.LegacyAdapters.convertCallbackToPromise(webpack_1.default, [webpackConfig]);
            if (stats.hasErrors() || stats.hasWarnings()) {
                const statsJson = stats.toJson('errors-warnings');
                const warnings = statsJson.warnings.join('\n');
                const errors = statsJson.errors.join('\n');
                const exceptionMessageParts = [];
                if (errors !== '') {
                    exceptionMessageParts.push(`errors: ${errors}`);
                }
                if (warnings !== '') {
                    exceptionMessageParts.push(`warnings: ${warnings}`);
                }
                throw new Error(exceptionMessageParts.join('\n'));
            }
        }
        catch (error) {
            this._terminal.writeErrorLine(`Error generating cumulative manifest: ${error}`);
            throw error;
        }
    }
    _getManifestsFileWebpackConfig(manifestsArray, outputFilePath, deployedAssetPathOverride, manifestsJsFileMetadata) {
        const filename = path.basename(outputFilePath);
        function compressManifests(key, value) {
            if (key === 'paths') {
                // Compress path mapping as prefix, localized, suffix
                const entries = Object.entries(value);
                // Empty object, short-circuit
                if (entries.length === 0) {
                    return value;
                }
                let prefix = entries[0][1];
                let suffix = entries[0][1];
                // Iterate once to find the maximum shared prefix and shared suffix
                for (const [, localizedPath] of entries) {
                    while (prefix && !localizedPath.startsWith(prefix)) {
                        prefix = prefix.slice(0, -1);
                    }
                    while (suffix && !localizedPath.endsWith(suffix)) {
                        suffix = suffix.slice(1);
                    }
                }
                const localized = {};
                for (const [locale, localizedPath] of entries) {
                    localized[locale] = localizedPath.slice(prefix.length, -suffix.length);
                }
                const newPathsObj = {
                    p: prefix,
                    l: localized,
                    s: suffix
                };
                return newPathsObj;
            }
            return value;
        }
        return {
            mode: 'production',
            entry: this._manifestsFilePath,
            output: {
                library: 'debugManifests',
                libraryTarget: 'umd',
                path: path.dirname(outputFilePath),
                filename: filename
            },
            optimization: {
                minimize: true,
                minimizer: [
                    new webpack4_module_minifier_plugin_1.ModuleMinifierPlugin({
                        minifier: new webpack4_module_minifier_plugin_1.LocalMinifier({
                            terserOptions: {
                                compress: {
                                    passes: 1
                                },
                                mangle: true,
                                output: {
                                    comments: false,
                                    wrap_func_args: false
                                }
                            }
                        })
                    })
                ]
            },
            resolve: {
                descriptionFiles: []
            },
            plugins: [
                new webpack_1.default.DefinePlugin({
                    // Don't pretty print this
                    MANIFESTS_ARRAY_PROXY: JSON.stringify(manifestsArray, compressManifests),
                    MANIFESTS_FILE_NAME: JSON.stringify(filename),
                    // Allow for the base url for assets to be different from the parent folder of manifests.js
                    DEPLOYED_ASSET_PATH_OVERRIDE: JSON.stringify(deployedAssetPathOverride || ''),
                    MANIFESTS_FILE_METADATA: JSON.stringify(manifestsJsFileMetadata || {})
                }),
                new set_webpack_public_path_plugin_1.SetPublicPathPlugin({
                    skipDetection: true,
                    scriptName: {
                        name: (0, lodash_1.escapeRegExp)(filename),
                        isTokenized: false
                    }
                })
            ],
            performance: {
                hints: false
            }
        };
    }
}
exports.ManifestsFileBuilder = ManifestsFileBuilder;
//# sourceMappingURL=ManifestsFileBuilder.js.map