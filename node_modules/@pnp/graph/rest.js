import { __awaiter, __generator } from "tslib";
import { setup as _setup, } from "./graphlibconfig.js";
import { GraphBatch } from "./batch.js";
import { Runtime, DefaultRuntime } from "@pnp/common";
var GraphRest = /** @class */ (function () {
    /**
     * Creates a new instance of the SPRest class
     *
     * @param options Additional options
     * @param baseUrl A string that should form the base part of the url
     */
    function GraphRest(_options, _baseUrl, _runtime) {
        if (_options === void 0) { _options = {}; }
        if (_baseUrl === void 0) { _baseUrl = "v1.0"; }
        if (_runtime === void 0) { _runtime = DefaultRuntime; }
        this._options = _options;
        this._baseUrl = _baseUrl;
        this._runtime = _runtime;
    }
    GraphRest.prototype.createBatch = function () {
        return new GraphBatch().setRuntime(this._runtime);
    };
    GraphRest.prototype.setup = function (config) {
        if (config.pageContext) {
            _setup({
                spfxContext: config,
            }, this._runtime);
        }
        else {
            _setup(config, this._runtime);
        }
    };
    GraphRest.prototype.createIsolated = function (init) {
        return __awaiter(this, void 0, void 0, function () {
            var baseUrl, cloneGlobal, options, config, runtime;
            return __generator(this, function (_a) {
                // merge our defaults
                init = Object.assign({
                    baseUrl: "v1.0",
                    cloneGlobal: true,
                    config: {},
                    options: {},
                }, init || {});
                baseUrl = init.baseUrl, cloneGlobal = init.cloneGlobal, options = init.options, config = init.config;
                runtime = cloneGlobal ? new Runtime(DefaultRuntime.export()) : new Runtime();
                runtime.assign(config);
                return [2 /*return*/, new GraphRest(options, baseUrl, runtime)];
            });
        });
    };
    GraphRest.prototype.childConfigHook = function (callback) {
        return callback({ options: this._options, baseUrl: this._baseUrl, runtime: this._runtime });
    };
    return GraphRest;
}());
export { GraphRest };
export var graph = new GraphRest();
//# sourceMappingURL=rest.js.map