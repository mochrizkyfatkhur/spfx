import { __awaiter, __generator } from "tslib";
import { combine, isUrlAbsolute, objectDefinedNotNull, DefaultRuntime, stringIsNullOrEmpty } from "@pnp/common";
/**
 * Ensures that a given url is absolute for the current web based on context
 *
 * @param candidateUrl The url to make absolute
 *
 */
export function toAbsoluteUrl(candidateUrl, runtime) {
    var _a, _b, _c;
    if (runtime === void 0) { runtime = DefaultRuntime; }
    return __awaiter(this, void 0, void 0, function () {
        var baseUrl, spFxContext, client, e_1;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (isUrlAbsolute(candidateUrl)) {
                        // if we are already absolute, then just return the url
                        return [2 /*return*/, candidateUrl];
                    }
                    baseUrl = (_a = runtime.get("graph")) === null || _a === void 0 ? void 0 : _a.baseUrl;
                    if (!stringIsNullOrEmpty(baseUrl)) {
                        // base url specified either with baseUrl of spfxContext config property
                        return [2 /*return*/, combine(baseUrl, candidateUrl)];
                    }
                    spFxContext = runtime.get("spfxContext");
                    if (!objectDefinedNotNull(spFxContext)) return [3 /*break*/, 4];
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, spFxContext.msGraphClientFactory.getClient()];
                case 2:
                    client = _d.sent();
                    baseUrl = (_c = (_b = client) === null || _b === void 0 ? void 0 : _b.constructor) === null || _c === void 0 ? void 0 : _c._graphBaseUrl;
                    if (!stringIsNullOrEmpty(baseUrl)) {
                        return [2 /*return*/, combine(baseUrl, candidateUrl)];
                    }
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _d.sent();
                    return [3 /*break*/, 4];
                case 4: 
                // try one last time with the default
                return [2 /*return*/, combine("https://graph.microsoft.com", candidateUrl)];
            }
        });
    });
}
//# sourceMappingURL=toabsoluteurl.js.map