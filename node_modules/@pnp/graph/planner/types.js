import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { assign } from "@pnp/common";
import { body } from "@pnp/odata";
import { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from "../graphqueryable.js";
import { getById, deleteableWithETag, updateableWithETag } from "../decorators.js";
import { graphPost } from "../operations.js";
import { defaultPath } from "../decorators.js";
/**
 * Planner
 */
var _Planner = /** @class */ (function (_super) {
    __extends(_Planner, _super);
    function _Planner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Planner.prototype, "plans", {
        // Should Only be able to get by id, or else error occur
        get: function () {
            return Plans(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Planner.prototype, "tasks", {
        // Should Only be able to get by id, or else error occur
        get: function () {
            return Tasks(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Planner.prototype, "buckets", {
        // Should Only be able to get by id, or else error occur
        get: function () {
            return Buckets(this);
        },
        enumerable: false,
        configurable: true
    });
    _Planner = __decorate([
        defaultPath("planner")
    ], _Planner);
    return _Planner;
}(_GraphQueryableInstance));
export { _Planner };
export var Planner = graphInvokableFactory(_Planner);
/**
 * Details
 */
var _PlanDetails = /** @class */ (function (_super) {
    __extends(_PlanDetails, _super);
    function _PlanDetails() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _PlanDetails = __decorate([
        defaultPath("details"),
        updateableWithETag()
    ], _PlanDetails);
    return _PlanDetails;
}(_GraphQueryableInstance));
export { _PlanDetails };
export var PlanDetails = graphInvokableFactory(_PlanDetails);
/**
 * Plan
 */
var _Plan = /** @class */ (function (_super) {
    __extends(_Plan, _super);
    function _Plan() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Plan.prototype, "tasks", {
        get: function () {
            return Tasks(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Plan.prototype, "buckets", {
        get: function () {
            return Buckets(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Plan.prototype, "details", {
        get: function () {
            return PlanDetails(this);
        },
        enumerable: false,
        configurable: true
    });
    _Plan = __decorate([
        updateableWithETag(),
        deleteableWithETag()
    ], _Plan);
    return _Plan;
}(_GraphQueryableInstance));
export { _Plan };
export var Plan = graphInvokableFactory(_Plan);
var _Plans = /** @class */ (function (_super) {
    __extends(_Plans, _super);
    function _Plans() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new Planner Plan.
     *
     * @param owner Id of Group object.
     * @param title The Title of the Plan.
     */
    _Plans.prototype.add = function (owner, title) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, graphPost(this, body({ owner: owner, title: title }))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                plan: this.getById(data.id),
                            }];
                }
            });
        });
    };
    _Plans = __decorate([
        defaultPath("plans"),
        getById(Plan)
    ], _Plans);
    return _Plans;
}(_GraphQueryableCollection));
export { _Plans };
export var Plans = graphInvokableFactory(_Plans);
/**
 * Details
 */
var _TaskDetails = /** @class */ (function (_super) {
    __extends(_TaskDetails, _super);
    function _TaskDetails() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _TaskDetails = __decorate([
        defaultPath("details"),
        updateableWithETag()
    ], _TaskDetails);
    return _TaskDetails;
}(_GraphQueryableInstance));
export { _TaskDetails };
export var TaskDetails = graphInvokableFactory(_TaskDetails);
/**
 * Task
 */
var _Task = /** @class */ (function (_super) {
    __extends(_Task, _super);
    function _Task() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Task.prototype, "details", {
        get: function () {
            return TaskDetails(this);
        },
        enumerable: false,
        configurable: true
    });
    _Task = __decorate([
        updateableWithETag(),
        deleteableWithETag()
    ], _Task);
    return _Task;
}(_GraphQueryableInstance));
export { _Task };
export var Task = graphInvokableFactory(_Task);
/**
 * Tasks
 */
var _Tasks = /** @class */ (function (_super) {
    __extends(_Tasks, _super);
    function _Tasks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new Planner Task.
     *
     * @param planId Id of Plan.
     * @param title The Title of the Task.
     * @param assignments Assign the task
     * @param bucketId Id of Bucket
     */
    _Tasks.prototype.add = function (planId, title, assignments, bucketId) {
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = assign({
                            planId: planId,
                            title: title,
                        }, assignments);
                        if (bucketId) {
                            postBody = assign(postBody, {
                                bucketId: bucketId,
                            });
                        }
                        return [4 /*yield*/, graphPost(this, body(postBody))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                task: this.getById(data.id),
                            }];
                }
            });
        });
    };
    _Tasks = __decorate([
        defaultPath("tasks"),
        getById(Task)
    ], _Tasks);
    return _Tasks;
}(_GraphQueryableCollection));
export { _Tasks };
export var Tasks = graphInvokableFactory(_Tasks);
/**
 * Bucket
 */
var _Bucket = /** @class */ (function (_super) {
    __extends(_Bucket, _super);
    function _Bucket() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Bucket.prototype, "tasks", {
        get: function () {
            return Tasks(this);
        },
        enumerable: false,
        configurable: true
    });
    _Bucket = __decorate([
        updateableWithETag(),
        deleteableWithETag()
    ], _Bucket);
    return _Bucket;
}(_GraphQueryableInstance));
export { _Bucket };
export var Bucket = graphInvokableFactory(_Bucket);
/**
 * Buckets
 */
var _Buckets = /** @class */ (function (_super) {
    __extends(_Buckets, _super);
    function _Buckets() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new Bucket.
     *
     * @param name Name of Bucket object.
     * @param planId The Id of the Plan.
     * @param oderHint Hint used to order items of this type in a list view.
     */
    _Buckets.prototype.add = function (name, planId, orderHint) {
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = {
                            name: name,
                            orderHint: orderHint ? orderHint : "",
                            planId: planId,
                        };
                        return [4 /*yield*/, graphPost(this, body(postBody))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                bucket: this.getById(data.id),
                                data: data,
                            }];
                }
            });
        });
    };
    _Buckets = __decorate([
        defaultPath("buckets"),
        getById(Bucket)
    ], _Buckets);
    return _Buckets;
}(_GraphQueryableCollection));
export { _Buckets };
export var Buckets = graphInvokableFactory(_Buckets);
//# sourceMappingURL=types.js.map