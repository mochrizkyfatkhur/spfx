import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { GraphQueryableInstance, GraphQueryableCollection, _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory, } from "../graphqueryable.js";
import { assign, combine, safeGlobal } from "@pnp/common";
import { defaultPath, getById, deleteable, updateable } from "../decorators.js";
import { body, BlobParser } from "@pnp/odata";
import { graphPatch, graphPost, graphPut } from "../operations.js";
/**
 * Describes a Drive instance
 *
 */
var _Drive = /** @class */ (function (_super) {
    __extends(_Drive, _super);
    function _Drive() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Drive.prototype, "root", {
        get: function () {
            return Root(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Drive.prototype, "list", {
        get: function () {
            return this.clone(GraphQueryableInstance, "list");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Drive.prototype, "recent", {
        get: function () {
            return DriveItems(this, "recent");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Drive.prototype, "sharedWithMe", {
        get: function () {
            return DriveItems(this, "sharedWithMe");
        },
        enumerable: false,
        configurable: true
    });
    _Drive.prototype.getItemById = function (id) {
        return DriveItem(this, combine("items", id));
    };
    _Drive = __decorate([
        defaultPath("drive")
    ], _Drive);
    return _Drive;
}(_GraphQueryableInstance));
export { _Drive };
export var Drive = graphInvokableFactory(_Drive);
/**
 * Describes a collection of Drive objects
 *
 */
var _Drives = /** @class */ (function (_super) {
    __extends(_Drives, _super);
    function _Drives() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _Drives.prototype.getById = function (id) {
        return Drive(this.getUrlBase(), "drives/" + id);
    };
    _Drives = __decorate([
        defaultPath("drives")
    ], _Drives);
    return _Drives;
}(_GraphQueryableCollection));
export { _Drives };
export var Drives = graphInvokableFactory(_Drives);
/**
 * Describes a Root instance
 *
 */
var _Root = /** @class */ (function (_super) {
    __extends(_Root, _super);
    function _Root() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Root.prototype, "children", {
        get: function () {
            return DriveItems(this, "children");
        },
        enumerable: false,
        configurable: true
    });
    _Root.prototype.search = function (query) {
        var searcher = this.clone(Root);
        searcher.query.set("search", "'" + query + "'");
        return searcher();
    };
    Object.defineProperty(_Root.prototype, "thumbnails", {
        get: function () {
            return this.clone(GraphQueryableCollection, "thumbnails");
        },
        enumerable: false,
        configurable: true
    });
    _Root = __decorate([
        defaultPath("root")
    ], _Root);
    return _Root;
}(_GraphQueryableInstance));
export { _Root };
export var Root = graphInvokableFactory(_Root);
/**
 * Describes a Drive Item instance
 *
 */
var _DriveItem = /** @class */ (function (_super) {
    __extends(_DriveItem, _super);
    function _DriveItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_DriveItem.prototype, "children", {
        get: function () {
            return DriveItems(this, "children");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_DriveItem.prototype, "thumbnails", {
        get: function () {
            return this.clone(GraphQueryableCollection, "thumbnails");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_DriveItem.prototype, "versions", {
        get: function () {
            return this.clone(GraphQueryableCollection, "versions");
        },
        enumerable: false,
        configurable: true
    });
    _DriveItem.prototype.move = function (parentReference, name) {
        return graphPatch(this, body(assign(parentReference, { name: name })));
    };
    _DriveItem.prototype.getContent = function () {
        return __awaiter(this, void 0, void 0, function () {
            var info, r, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.get()];
                    case 1:
                        info = _a.sent();
                        return [4 /*yield*/, safeGlobal.fetch(info["@microsoft.graph.downloadUrl"], {
                                headers: {
                                    "accept": "application/json",
                                },
                                method: "GET",
                                responseType: "arraybuffer",
                            })];
                    case 2:
                        r = _a.sent();
                        p = new BlobParser();
                        return [2 /*return*/, p.parse(r)];
                }
            });
        });
    };
    _DriveItem.prototype.setContent = function (content) {
        return graphPut(this.clone(DriveItem, "content"), {
            body: content,
        });
    };
    _DriveItem = __decorate([
        deleteable(),
        updateable()
    ], _DriveItem);
    return _DriveItem;
}(_GraphQueryableInstance));
export { _DriveItem };
export var DriveItem = graphInvokableFactory(_DriveItem);
/**
 * Describes a collection of Drive Item objects
 *
 */
var _DriveItems = /** @class */ (function (_super) {
    __extends(_DriveItems, _super);
    function _DriveItems() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _DriveItems_1 = _DriveItems;
    _DriveItems.prototype.add = function (filename, content) {
        return __awaiter(this, void 0, void 0, function () {
            var parent, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parent = this.getParent(_DriveItems_1);
                        parent.concat(":/" + filename + ":/content");
                        return [4 /*yield*/, graphPut(parent, { body: content })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                driveItem: this.getById(data.id),
                            }];
                }
            });
        });
    };
    /**
     * Adds a folder to this collection of drive items
     *
     * @param name Name of the new folder
     * @returns result with folder data and chainable drive item object
     */
    _DriveItems.prototype.addFolder = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = {
                            name: name,
                            folder: {},
                            "@microsoft.graph.conflictBehavior": "rename",
                        };
                        return [4 /*yield*/, graphPost(this, body(postBody))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                driveItem: this.getById(data.id),
                            }];
                }
            });
        });
    };
    var _DriveItems_1;
    _DriveItems = _DriveItems_1 = __decorate([
        getById(DriveItem)
    ], _DriveItems);
    return _DriveItems;
}(_GraphQueryableCollection));
export { _DriveItems };
export var DriveItems = graphInvokableFactory(_DriveItems);
//# sourceMappingURL=types.js.map