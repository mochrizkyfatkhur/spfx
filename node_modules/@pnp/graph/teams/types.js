import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory, GraphQueryableInstance } from "../graphqueryable";
import { body, LambdaParser } from "@pnp/odata";
import { assign } from "@pnp/common";
import { updateable, getById, deleteable } from "../decorators";
import { graphPost } from "../operations";
import { defaultPath } from "../decorators";
/**
 * Represents a Microsoft Team
 */
var _Team = /** @class */ (function (_super) {
    __extends(_Team, _super);
    function _Team() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Team.prototype, "primaryChannel", {
        get: function () {
            return Channel(this, "primaryChannel");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_Team.prototype, "channels", {
        get: function () {
            return Channels(this);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Archives this Team
     *
     * @param shouldSetSpoSiteReadOnlyForMembers Should members have Read-only in associated Team Site
     */
    _Team.prototype.archive = function (shouldSetSpoSiteReadOnlyForMembers) {
        if (shouldSetSpoSiteReadOnlyForMembers === void 0) { shouldSetSpoSiteReadOnlyForMembers = false; }
        return graphPost(this.clone(Team, "archive"), body({ shouldSetSpoSiteReadOnlyForMembers: shouldSetSpoSiteReadOnlyForMembers }));
    };
    /**
    * Unarchives this Team
    */
    _Team.prototype.unarchive = function () {
        return graphPost(this.clone(Team, "unarchive"));
    };
    /**
     * Clones this Team
     * @param name The name of the new Group
     * @param description Optional description of the group
     * @param partsToClone Parts to clone ex: apps,tabs,settings,channels,members
     * @param visibility Set visibility to public or private
     */
    _Team.prototype.cloneTeam = function (name, description, partsToClone, visibility) {
        if (description === void 0) { description = ""; }
        if (partsToClone === void 0) { partsToClone = "apps,tabs,settings,channels,members"; }
        if (visibility === void 0) { visibility = "private"; }
        return __awaiter(this, void 0, void 0, function () {
            var postBody, parser, creator, data, result, location_1, locationArray;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = {
                            description: description ? description : "",
                            displayName: name,
                            mailNickname: name,
                            partsToClone: partsToClone,
                            visibility: visibility,
                        };
                        parser = new LambdaParser(function (r) { return Promise.resolve(r.headers); });
                        creator = Teams(this, "clone").usingParser(parser);
                        return [4 /*yield*/, graphPost(creator, body(postBody))];
                    case 1:
                        data = _a.sent();
                        result = { teamId: "", operationId: "" };
                        if (data.has("location")) {
                            location_1 = data.get("location");
                            locationArray = location_1.split("/");
                            if (locationArray.length === 3) {
                                result.teamId = locationArray[1].substring(locationArray[1].indexOf("'") + 1, locationArray[1].lastIndexOf("'"));
                                result.operationId = locationArray[2].substring(locationArray[2].indexOf("'") + 1, locationArray[2].lastIndexOf("'"));
                            }
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    _Team.prototype.getOperationById = function (id) {
        return GraphQueryableInstance(this, "operations/" + id)();
    };
    _Team = __decorate([
        defaultPath("team"),
        updateable()
    ], _Team);
    return _Team;
}(_GraphQueryableInstance));
export { _Team };
export var Team = graphInvokableFactory(_Team);
/**
 * Teams
 */
var _Teams = /** @class */ (function (_super) {
    __extends(_Teams, _super);
    function _Teams() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _Teams.prototype.create = function (team) {
        return __awaiter(this, void 0, void 0, function () {
            var parser, creator, data, result, location_2, locationArray;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parser = new LambdaParser(function (r) { return Promise.resolve(r.headers); });
                        creator = Teams(this, null).usingParser(parser);
                        return [4 /*yield*/, graphPost(creator, body(team))];
                    case 1:
                        data = _a.sent();
                        result = { teamId: "", operationId: "" };
                        if (data.has("location")) {
                            location_2 = data.get("location");
                            locationArray = location_2.split("/");
                            if (locationArray.length === 3) {
                                result.teamId = locationArray[1].substring(locationArray[1].indexOf("'") + 1, locationArray[1].lastIndexOf("'"));
                                result.operationId = locationArray[2].substring(locationArray[2].indexOf("'") + 1, locationArray[2].lastIndexOf("'"));
                            }
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    _Teams = __decorate([
        defaultPath("teams"),
        getById(Team)
    ], _Teams);
    return _Teams;
}(_GraphQueryableCollection));
export { _Teams };
export var Teams = graphInvokableFactory(_Teams);
/**
 * Channel
 */
var _Channel = /** @class */ (function (_super) {
    __extends(_Channel, _super);
    function _Channel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_Channel.prototype, "tabs", {
        get: function () {
            return Tabs(this);
        },
        enumerable: false,
        configurable: true
    });
    return _Channel;
}(_GraphQueryableInstance));
export { _Channel };
export var Channel = graphInvokableFactory(_Channel);
/**
 * Channels
 */
var _Channels = /** @class */ (function (_super) {
    __extends(_Channels, _super);
    function _Channels() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new Channel in the Team
     * @param displayName The display name of the new channel
     * @param description Optional description of the channel
     *
     */
    _Channels.prototype.add = function (displayName, description) {
        if (description === void 0) { description = ""; }
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = {
                            description: description,
                            displayName: displayName,
                        };
                        return [4 /*yield*/, graphPost(this, body(postBody))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                channel: this.getById(data.id),
                                data: data,
                            }];
                }
            });
        });
    };
    _Channels = __decorate([
        defaultPath("channels"),
        getById(Channel)
    ], _Channels);
    return _Channels;
}(_GraphQueryableCollection));
export { _Channels };
export var Channels = graphInvokableFactory(_Channels);
/**
 * Tab
 */
var _Tab = /** @class */ (function (_super) {
    __extends(_Tab, _super);
    function _Tab() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _Tab = __decorate([
        defaultPath("tab"),
        updateable(),
        deleteable()
    ], _Tab);
    return _Tab;
}(_GraphQueryableInstance));
export { _Tab };
export var Tab = graphInvokableFactory(_Tab);
/**
 * Tabs
 */
var _Tabs = /** @class */ (function (_super) {
    __extends(_Tabs, _super);
    function _Tabs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a tab to the channel
     * @param name The name of the new Tab
     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a
     * @param tabsConfiguration visit https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/teamstab_add for reference
     */
    _Tabs.prototype.add = function (name, appUrl, properties) {
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = assign({
                            displayName: name,
                            "teamsApp@odata.bind": appUrl,
                        }, properties);
                        return [4 /*yield*/, graphPost(this, body(postBody))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                tab: this.getById(data.id),
                            }];
                }
            });
        });
    };
    _Tabs = __decorate([
        defaultPath("tabs"),
        getById(Tab)
    ], _Tabs);
    return _Tabs;
}(_GraphQueryableCollection));
export { _Tabs };
export var Tabs = graphInvokableFactory(_Tabs);
//# sourceMappingURL=types.js.map