import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { assign } from "@pnp/common";
import { body } from "@pnp/odata";
import { _GraphQueryableCollection, graphInvokableFactory } from "../graphqueryable.js";
import { defaultPath } from "../decorators.js";
import { graphPost } from "../operations.js";
/**
 * Invitations
 */
var _Invitations = /** @class */ (function (_super) {
    __extends(_Invitations, _super);
    function _Invitations() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new Invitation via invitation manager.
     *
     * @param invitedUserEmailAddress The email address of the user being invited.
     * @param inviteRedirectUrl The URL user should be redirected to once the invitation is redeemed.
     * @param additionalProperties A plain object collection of additional properties you want to set in the invitation
     */
    _Invitations.prototype.create = function (invitedUserEmailAddress, inviteRedirectUrl, additionalProperties) {
        if (additionalProperties === void 0) { additionalProperties = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = assign({ inviteRedirectUrl: inviteRedirectUrl, invitedUserEmailAddress: invitedUserEmailAddress }, additionalProperties);
                        return [4 /*yield*/, graphPost(this, body(postBody))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, { data: data }];
                }
            });
        });
    };
    _Invitations = __decorate([
        defaultPath("invitations")
    ], _Invitations);
    return _Invitations;
}(_GraphQueryableCollection));
export { _Invitations };
export var Invitations = graphInvokableFactory(_Invitations);
//# sourceMappingURL=types.js.map