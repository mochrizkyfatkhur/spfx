import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from "../graphqueryable.js";
import { assign } from "@pnp/common";
import { body } from "@pnp/odata";
import { defaultPath, deleteable, updateable, getById } from "../decorators.js";
import { graphPost } from "../operations.js";
/**
 * Subscription
 */
var _Subscription = /** @class */ (function (_super) {
    __extends(_Subscription, _super);
    function _Subscription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _Subscription = __decorate([
        deleteable(),
        updateable()
    ], _Subscription);
    return _Subscription;
}(_GraphQueryableInstance));
export { _Subscription };
export var Subscription = graphInvokableFactory(_Subscription);
/**
 * Subscriptions
 */
var _Subscriptions = /** @class */ (function (_super) {
    __extends(_Subscriptions, _super);
    function _Subscriptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new Subscription.
     *
     * @param changeType Indicates the type of change in the subscribed resource that will raise a notification. The supported values are: created, updated, deleted.
     * @param notificationUrl The URL of the endpoint that will receive the notifications. This URL must make use of the HTTPS protocol.
     * @param resource Specifies the resource that will be monitored for changes. Do not include the base URL (https://graph.microsoft.com/v1.0/).
     * @param expirationDateTime Specifies the date and time when the webhook subscription expires. The time is in UTC.
     * @param props A plain object collection of additional properties you want to set on the new subscription
     *
     */
    _Subscriptions.prototype.add = function (changeType, notificationUrl, resource, expirationDateTime, props) {
        if (props === void 0) { props = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = assign({
                            changeType: changeType,
                            expirationDateTime: expirationDateTime,
                            notificationUrl: notificationUrl,
                            resource: resource,
                        }, props);
                        return [4 /*yield*/, graphPost(this, body(postBody))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                data: data,
                                subscription: this.getById(data.id),
                            }];
                }
            });
        });
    };
    _Subscriptions = __decorate([
        defaultPath("subscriptions"),
        getById(Subscription)
    ], _Subscriptions);
    return _Subscriptions;
}(_GraphQueryableCollection));
export { _Subscriptions };
export var Subscriptions = graphInvokableFactory(_Subscriptions);
//# sourceMappingURL=types.js.map