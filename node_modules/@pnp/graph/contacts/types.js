import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from "../graphqueryable.js";
import { assign } from "@pnp/common";
import { defaultPath, updateable, deleteable, getById } from "../decorators.js";
import { graphPost } from "../operations.js";
import { body } from "@pnp/odata";
/**
 * Contact
 */
var _Contact = /** @class */ (function (_super) {
    __extends(_Contact, _super);
    function _Contact() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _Contact = __decorate([
        updateable(),
        deleteable()
    ], _Contact);
    return _Contact;
}(_GraphQueryableInstance));
export { _Contact };
export var Contact = graphInvokableFactory(_Contact);
/**
 * Contacts
 */
var _Contacts = /** @class */ (function (_super) {
    __extends(_Contacts, _super);
    function _Contacts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    * Create a new Contact for the user.
    *
    * @param givenName The contact's given name.
    * @param surName The contact's surname.
    * @param emailAddresses The contact's email addresses.
    * @param businessPhones The contact's business phone numbers.
    * @param additionalProperties A plain object collection of additional properties you want to set on the new contact
    */
    _Contacts.prototype.add = function (givenName, surName, emailAddresses, businessPhones, additionalProperties) {
        if (additionalProperties === void 0) { additionalProperties = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = assign({ businessPhones: businessPhones, emailAddresses: emailAddresses, givenName: givenName, surName: surName }, additionalProperties);
                        return [4 /*yield*/, graphPost(this, body(postBody))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                contact: this.getById(data.id),
                                data: data,
                            }];
                }
            });
        });
    };
    _Contacts = __decorate([
        defaultPath("contacts"),
        getById(Contact)
    ], _Contacts);
    return _Contacts;
}(_GraphQueryableCollection));
export { _Contacts };
export var Contacts = graphInvokableFactory(_Contacts);
/**
 * Contact Folder
 */
var _ContactFolder = /** @class */ (function (_super) {
    __extends(_ContactFolder, _super);
    function _ContactFolder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(_ContactFolder.prototype, "contacts", {
        /**
         * Gets the contacts in this contact folder
         */
        get: function () {
            return Contacts(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_ContactFolder.prototype, "childFolders", {
        /**
        * Gets the contacts in this contact folder
        */
        get: function () {
            return ContactFolders(this, "childFolders");
        },
        enumerable: false,
        configurable: true
    });
    _ContactFolder = __decorate([
        deleteable(),
        updateable()
    ], _ContactFolder);
    return _ContactFolder;
}(_GraphQueryableInstance));
export { _ContactFolder };
export var ContactFolder = graphInvokableFactory(_ContactFolder);
/**
 * Contact Folders
 */
var _ContactFolders = /** @class */ (function (_super) {
    __extends(_ContactFolders, _super);
    function _ContactFolders() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new Contact Folder for the user.
     *
     * @param displayName The folder's display name.
     * @param parentFolderId The ID of the folder's parent folder.
     */
    _ContactFolders.prototype.add = function (displayName, parentFolderId) {
        return __awaiter(this, void 0, void 0, function () {
            var postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        postBody = {
                            displayName: displayName,
                            parentFolderId: parentFolderId,
                        };
                        return [4 /*yield*/, graphPost(this, body(postBody))];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, {
                                contactFolder: this.getById(data.id),
                                data: data,
                            }];
                }
            });
        });
    };
    _ContactFolders = __decorate([
        defaultPath("contactFolders"),
        getById(ContactFolder)
    ], _ContactFolders);
    return _ContactFolders;
}(_GraphQueryableCollection));
export { _ContactFolders };
export var ContactFolders = graphInvokableFactory(_ContactFolders);
//# sourceMappingURL=types.js.map