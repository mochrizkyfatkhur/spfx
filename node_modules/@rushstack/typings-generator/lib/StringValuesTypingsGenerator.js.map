{"version":3,"file":"StringValuesTypingsGenerator.js","sourceRoot":"","sources":["../src/StringValuesTypingsGenerator.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,2BAAyB;AAEzB,yDAAgF;AAkChF,MAAM,gCAAgC,GAAW,SAAS,CAAC;AAE3D;;;;;GAKG;AACH,MAAa,4BAA6B,SAAQ,mCAAgB;IAChE,YAAmB,OAA6C;QAC9D,KAAK,iCACA,OAAO,KACV,uBAAuB,EAAE,KAAK,EAAE,YAAoB,EAAE,QAAgB,EAAE,YAAoB,EAAE,EAAE;gBAC9F,MAAM,kBAAkB,GAAoC,MAAM,OAAO,CAAC,uBAAuB,CAC/F,YAAY,EACZ,QAAQ,EACR,YAAY,CACb,CAAC;gBAEF,IAAI,kBAAkB,KAAK,SAAS,EAAE;oBACpC,OAAO;iBACR;gBAED,MAAM,WAAW,GAAa,EAAE,CAAC;gBACjC,MAAM,aAAa,GAAW,OAAO,CAAC,4BAA4B;oBAChE,CAAC,CAAC,OAAO,CAAC,4BAA4B;oBACtC,CAAC,CAAC,gCAAgC,CAAC;gBACrC,IAAI,MAAM,GAAW,EAAE,CAAC;gBACxB,IAAI,OAAO,CAAC,eAAe,EAAE;oBAC3B,WAAW,CAAC,IAAI,CAAC,oBAAoB,aAAa,IAAI,CAAC,CAAC;oBACxD,MAAM,GAAG,IAAI,CAAC;iBACf;gBAED,KAAK,MAAM,iBAAiB,IAAI,kBAAkB,CAAC,OAAO,EAAE;oBAC1D,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,iBAAiB,CAAC;oBAElD,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;wBACpC,WAAW,CAAC,IAAI,CACd,GAAG,MAAM,KAAK,EACd,GAAG,MAAM,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,EACjD,GAAG,MAAM,KAAK,CACf,CAAC;qBACH;oBAED,IAAI,OAAO,CAAC,eAAe,EAAE;wBAC3B,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,IAAI,UAAU,YAAY,EAAE,EAAE,CAAC,CAAC;qBAC3D;yBAAM;wBACL,WAAW,CAAC,IAAI,CAAC,wBAAwB,UAAU,WAAW,EAAE,EAAE,CAAC,CAAC;qBACrE;iBACF;gBAED,IAAI,OAAO,CAAC,eAAe,EAAE;oBAC3B,WAAW,CAAC,IAAI,CACd,GAAG,EACH,EAAE,EACF,0BAA0B,aAAa,GAAG,EAC1C,EAAE,EACF,yBAAyB,CAC1B,CAAC;iBACH;gBAED,OAAO,WAAW,CAAC,IAAI,CAAC,QAAG,CAAC,CAAC;YAC/B,CAAC,IACD,CAAC;IACL,CAAC;CACF;AAzDD,oEAyDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { EOL } from 'os';\n\nimport { ITypingsGeneratorOptions, TypingsGenerator } from './TypingsGenerator';\n\n/**\n * @public\n */\nexport interface IStringValueTyping {\n  exportName: string;\n  comment?: string;\n}\n\n/**\n * @public\n */\nexport interface IStringValueTypings {\n  typings: IStringValueTyping[];\n}\n\n/**\n * @public\n */\nexport interface IStringValuesTypingsGeneratorOptions\n  extends ITypingsGeneratorOptions<IStringValueTypings | undefined> {\n  /**\n   * Setting this option wraps the typings export in a default property.\n   */\n  exportAsDefault?: boolean;\n\n  /**\n   * When `exportAsDefault` is true, this optional setting determines the interface name\n   * for the default wrapped export. Ignored when `exportAsDefault` is false.\n   */\n  exportAsDefaultInterfaceName?: string;\n}\n\nconst EXPORT_AS_DEFAULT_INTERFACE_NAME: string = 'IExport';\n\n/**\n * This is a simple tool that generates .d.ts files for non-TS files that can be represented as\n * a simple set of named string exports.\n *\n * @public\n */\nexport class StringValuesTypingsGenerator extends TypingsGenerator {\n  public constructor(options: IStringValuesTypingsGeneratorOptions) {\n    super({\n      ...options,\n      parseAndGenerateTypings: async (fileContents: string, filePath: string, relativePath: string) => {\n        const stringValueTypings: IStringValueTypings | undefined = await options.parseAndGenerateTypings(\n          fileContents,\n          filePath,\n          relativePath\n        );\n\n        if (stringValueTypings === undefined) {\n          return;\n        }\n\n        const outputLines: string[] = [];\n        const interfaceName: string = options.exportAsDefaultInterfaceName\n          ? options.exportAsDefaultInterfaceName\n          : EXPORT_AS_DEFAULT_INTERFACE_NAME;\n        let indent: string = '';\n        if (options.exportAsDefault) {\n          outputLines.push(`export interface ${interfaceName} {`);\n          indent = '  ';\n        }\n\n        for (const stringValueTyping of stringValueTypings.typings) {\n          const { exportName, comment } = stringValueTyping;\n\n          if (comment && comment.trim() !== '') {\n            outputLines.push(\n              `${indent}/**`,\n              `${indent} * ${comment.replace(/\\*\\//g, '*\\\\/')}`,\n              `${indent} */`\n            );\n          }\n\n          if (options.exportAsDefault) {\n            outputLines.push(`${indent}'${exportName}': string;`, '');\n          } else {\n            outputLines.push(`export declare const ${exportName}: string;`, '');\n          }\n        }\n\n        if (options.exportAsDefault) {\n          outputLines.push(\n            '}',\n            '',\n            `declare const strings: ${interfaceName};`,\n            '',\n            'export default strings;'\n          );\n        }\n\n        return outputLines.join(EOL);\n      }\n    });\n  }\n}\n"]}