{"version":3,"sources":["webpack:///.././node_modules/@pnp/spfx-property-controls/node_modules/office-ui-fabric-react/lib/utilities/color/colors.js","webpack:///.././node_modules/@pnp/spfx-property-controls/node_modules/office-ui-fabric-react/lib/utilities/color/correctHSV.js","webpack:///.././node_modules/@pnp/spfx-property-controls/lib/propertyFields/colorPicker/PropertyFieldColorPickerHost.module.css?fd4c","webpack:///.././node_modules/@pnp/spfx-property-controls/lib/propertyFields/colorPicker/PropertyFieldColorPicker.js","webpack:///.././node_modules/@pnp/spfx-property-controls/node_modules/office-ui-fabric-react/lib/utilities/color/getColorFromHSV.js","webpack:///.././node_modules/@pnp/spfx-property-controls/node_modules/office-ui-fabric-react/lib/utilities/color/shades.js","webpack:///.././node_modules/@pnp/spfx-property-controls/lib/propertyFields/colorPicker/index.js","webpack:///.././node_modules/@pnp/spfx-property-controls/lib/propertyFields/colorPicker/PropertyFieldColorPickerHost.module.scss.js","webpack:///.././node_modules/@pnp/spfx-property-controls/lib/propertyFields/colorPicker/PropertyFieldColorPickerHost.module.css","webpack:///.././node_modules/@pnp/spfx-property-controls/lib/propertyFields/colorPicker/PropertyFieldColorPickerHost.js","webpack:///.././node_modules/@pnp/spfx-property-controls/lib/propertyFields/colorPicker/IPropertyFieldColorPicker.js","webpack:///.././node_modules/@pnp/spfx-property-controls/node_modules/office-ui-fabric-react/lib/utilities/color/index.js","webpack:///.././node_modules/@pnp/spfx-property-controls/node_modules/office-ui-fabric-react/lib/utilities/color/hsv2hsl.js","webpack:///.././node_modules/@pnp/spfx-property-controls/lib/PropertyFieldColorPicker.js","webpack:///.././node_modules/@pnp/spfx-property-controls/node_modules/office-ui-fabric-react/lib/utilities/color/updateRGB.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyB;AACE;AACD;AACF;AACE;AACA;AACA;AACA;AACA;AACA;AACW;AACF;AACD;AACG;AACV;AACD;AACE;AACS;AACX;AACG;AACA;AACA;AAC7B,kC;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAgF;AAChD;AAChC;AACO;AACP;AACA,WAAW,oDAAK,UAAU,qDAAa;AACvC,WAAW,oDAAK,UAAU,4DAAoB;AAC9C,WAAW,oDAAK,UAAU,uDAAe;AACzC;AACA;AACA,sC;;;;;;;;;;;ACVA,cAAc,mBAAO,CAAC,mLAAiL;AACvM,aAAa,mBAAO,CAAC,yHAA0K;;AAE/L,4CAA4C,QAAS;;AAErD;AACA,eAAe,oBAAoB;;AAEnC,mD;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmE;AACa;AACjD;AACO;AACyB;AACc;AACH;AAC1E;AACA;AACA;AACA,oBAAoB,gFAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAmB,CAAC,qEAA4B;AACtE;AACA;AACA;AACA;AACA;AACA,4CAA4C,wFAA6B;AACzE;AACA;AACA,SAAS;AACT,QAAQ,gDAAe;AACvB;AACA;AACA;AACA,iDAAiD,qGAAkB;AACnE,iDAAiD,qGAAkB;AACnE;AACA;AACA,YAAY,+EAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACM;AACP;AACA;AACA,oD;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACP;AACA;AACkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oCAAoC,uDAAe;AACnD,aAAa,wDAAO;AACpB,cAAc,wDAAO;AACrB,cAAc,yEAAgB;AAC9B,YAAY;AACZ;AACA,2C;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACD;AACL;AACkB;AAClB;AACpC;AACA;AACA;AACA;AACA,iFAAiF;AACjF,+EAA+E;AAC/E,+EAA+E;AAC/E,6EAA6E;AAC7E,oEAAoE;AACpE,qEAAqE;AACrE,kDAAkD;AAClD,wCAAwC;AACxC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sBAAsB;AACvB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sDAAc,gBAAgB,sDAAc,gBAAgB,sDAAc;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP,WAAW,wDAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAO;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0EAAgB,CAAC,yDAAM,CAAC,wDAAO,wBAAwB,aAAa;AAC/E;AACA;AACA;AACA;AACO;AACP;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,WAAW,0EAAgB,CAAC,yDAAM,CAAC,wDAAO,wBAAwB,aAAa;AAC/E;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sDAAc;AAChD,kCAAkC,sDAAc;AAChD,kCAAkC,sDAAc;AAChD,qDAAqD;AACrD;AACA,kCAAkC,sDAAc;AAChD,kCAAkC,sDAAc;AAChD,kCAAkC,sDAAc;AAChD,qDAAqD;AACrD;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;ACvLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAA2C;AACC;AACG;AAC/C,iC;;;;;;;;;;;;ACHA;AAAA;AACA,mBAAO,CAAC,uDAA2C;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACe,qEAAM,EAAC;AACtB;AACA,oE;;;;;;;;;;;ACXA,2BAA2B,mBAAO,CAAC,qGAAyF;AAC5H;AACA,cAAc,QAAS,iDAAiD,mBAAmB,WAAW,sEAAsE,UAAU,gDAAgD,iBAAiB,WAAW,sEAAsE,mBAAmB,6CAA6C,oBAAoB,WAAW,YAAY,UAAU,SAAS,iBAAiB,aAAa;;;;;;;;;;;;;ACFpe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AAC8B;AAC0B;AACY;AACN;AACC;AACd;AAC0B;AACxB;AACpD;AACA;AACA;AACA;AACA,QAAQ,uDAAe;AACvB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAmB,SAAS,YAAY,iFAAM,8CAA8C,iFAAM,eAAe;AACjI,gCAAgC,mDAAmB,CAAC,sEAAK;AACzD,iCAAiC,wFAA6B;AAC9D,gBAAgB,mDAAmB,WAAW,YAAY,iFAAM,gBAAgB;AAChF,oBAAoB,mDAAmB;AACvC,wBAAwB,mDAAmB;AAC3C,4BAA4B,mDAAmB,QAAQ,SAAS,gBAAgB,EAAE;AAClF;AACA,oCAAoC,mDAAmB,SAAS,gCAAgC;AAChG,wCAAwC,mDAAmB,CAAC,kFAAW,GAAG,8HAA8H;AACxM;AACA,oCAAoC,mDAAmB,SAAS,iEAAiE,iEAAiE,EAAE;AACpM,4BAA4B,mDAAmB,QAAQ,YAAY,iFAAM,cAAc;AACvF,gCAAgC,mDAAmB,CAAC,4EAAU,GAAG,QAAQ,6EAA8B,6CAA6C,2CAA2C,6EAA8B,EAAE,gCAAgC;AAC/P,iCAAiC,wFAA6B;AAC9D,gBAAgB,mDAAmB;AACnC,oBAAoB,mDAAmB,SAAS,SAAS,0CAA0C,EAAE;AACrG,wBAAwB,mDAAmB;AAC3C,oBAAoB,mDAAmB,CAAC,kFAAW,GAAG,8HAA8H;AACpL,iCAAiC,wFAA6B;AAC9D,gBAAgB,mDAAmB,cAAc,4BAA4B,iFAAM,aAAa;AAChG,oBAAoB,mDAAmB,CAAC,kFAAW,GAAG,mFAAmF;AACzI;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC,CAAC,+CAAe;AACF,2FAA4B,EAAC;AAC5C,wD;;;;;;;;;;;;ACnEA;AAAA;AAAA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,CAAC,sEAAsE;AACvE,qD;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAyB;AACA;AACA;AACE;AACD;AACF;AACE;AACA;AACA;AACA;AACA;AACA;AACW;AACF;AACD;AACG;AACV;AACD;AACE;AACS;AACX;AACG;AACA;AAC7B,iC;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAiE;AACjE;AACO;AACP,SAAS,4DAAoB;AAC7B,SAAS,uDAAe;AACxB;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,mC;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACnD,oD;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAsD;AACtD;AACA;AACA;AACA;AACO;AACP,WAAW,0EAAgB;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,qC","file":"chunk.4.js","sourcesContent":["export * from './consts';\nexport * from './cssColor';\nexport * from './rgb2hex';\nexport * from './clamp';\nexport * from './hsl2rgb';\nexport * from './hsl2hsv';\nexport * from './hsv2rgb';\nexport * from './hsv2hex';\nexport * from './rgb2hsv';\nexport * from './hsv2hsl';\nexport * from './getColorFromString';\nexport * from './getColorFromRGBA';\nexport * from './getColorFromHSV';\nexport * from './getFullColorString';\nexport * from './updateSV';\nexport * from './updateH';\nexport * from './updateRGB';\nexport * from './getColorFromString';\nexport * from './updateA';\nexport * from './correctRGB';\nexport * from './correctHSV';\nexport * from './correctHex';\n//# sourceMappingURL=colors.js.map","import { MAX_COLOR_HUE, MAX_COLOR_SATURATION, MAX_COLOR_VALUE } from './consts';\nimport { clamp } from './clamp';\n/** Corrects an HSV color to fall within the valid range. */\nexport function correctHSV(color) {\n    return {\n        h: clamp(color.h, MAX_COLOR_HUE),\n        s: clamp(color.s, MAX_COLOR_SATURATION),\n        v: clamp(color.v, MAX_COLOR_VALUE)\n    };\n}\n//# sourceMappingURL=correctHSV.js.map","var content = require(\"!!../../../../../@microsoft/spfx-heft-plugins/node_modules/css-loader/dist/cjs.js!../../../../../postcss-loader/src/index.js??postcss!./PropertyFieldColorPickerHost.module.css\");\nvar loader = require(\"D:\\\\pnp sp-dev-fx-webparts main samples-react-tiles-v2\\\\node_modules\\\\@microsoft\\\\loader-load-themed-styles\\\\node_modules\\\\@microsoft\\\\load-themed-styles\\\\lib\\\\index.js\");\n\nif(typeof content === \"string\") content = [[module.id, content]];\n\n// add the styles to the DOM\nfor (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1], true);\n\nif(content.locals) module.exports = content.locals;","import { PropertyPaneFieldType } from '@microsoft/sp-webpart-base';\nimport { getColorFromString } from 'office-ui-fabric-react/lib/utilities/color';\nimport * as React from 'react';\nimport * as ReactDom from 'react-dom';\nimport { setPropertyValue } from '../../helpers/GeneralHelper';\nimport { PropertyFieldColorPickerStyle, } from './IPropertyFieldColorPicker';\nimport PropertyFieldColorPickerHost from './PropertyFieldColorPickerHost';\nvar PropertyFieldColorPickerBuilder = /** @class */ (function () {\n    function PropertyFieldColorPickerBuilder(_targetProperty, _properties) {\n        //Properties defined by IPropertyPaneField\n        this.type = PropertyPaneFieldType.Custom;\n        this.targetProperty = _targetProperty;\n        this.properties = {\n            key: _properties.key,\n            label: _properties.label,\n            onPropertyChange: _properties.onPropertyChange,\n            selectedColor: _properties.selectedColor,\n            disabled: _properties.disabled,\n            isHidden: _properties.isHidden,\n            alphaSliderHidden: _properties.alphaSliderHidden,\n            properties: _properties.properties,\n            style: _properties.style,\n            iconName: _properties.iconName,\n            onRender: this.onRender.bind(this)\n        };\n        if (typeof _properties.selectedColor === 'undefined') {\n            this.color = '#ffffff';\n        }\n        else {\n            if (typeof _properties.selectedColor === 'string') {\n                this.color = _properties.selectedColor;\n            }\n            else {\n                this.color = _properties.selectedColor.str;\n            }\n        }\n        this.valueAsObject = _properties.valueAsObject;\n    }\n    PropertyFieldColorPickerBuilder.prototype.render = function () {\n        if (!this.elem) {\n            return;\n        }\n        this.onRender(this.elem);\n    };\n    PropertyFieldColorPickerBuilder.prototype.onRender = function (elem, ctx, changeCallback) {\n        if (!this.elem) {\n            this.elem = elem;\n        }\n        this.changeCB = changeCallback;\n        var element = React.createElement(PropertyFieldColorPickerHost, {\n            label: this.properties.label,\n            alphaSliderHidden: this.properties.alphaSliderHidden,\n            disabled: this.properties.disabled,\n            isHidden: this.properties.isHidden,\n            selectedColor: this.color,\n            style: this.properties.style || PropertyFieldColorPickerStyle.Inline,\n            iconName: this.properties.iconName || 'Color',\n            onColorChanged: this.onColorChanged.bind(this)\n        });\n        ReactDom.render(element, elem);\n    };\n    PropertyFieldColorPickerBuilder.prototype.onColorChanged = function (newColor) {\n        if (this.properties.onPropertyChange && newColor !== null) {\n            var newValue = (this.valueAsObject ? getColorFromString(newColor) : newColor);\n            var oldValue = (this.valueAsObject ? getColorFromString(this.color) : this.color);\n            this.color = newColor;\n            this.properties.onPropertyChange(this.targetProperty, oldValue, newValue);\n            setPropertyValue(this.properties.properties, this.targetProperty, newValue);\n            if (typeof this.changeCB !== 'undefined' && this.changeCB !== null) {\n                this.changeCB(this.targetProperty, newValue);\n            }\n        }\n    };\n    return PropertyFieldColorPickerBuilder;\n}());\nexport function PropertyFieldColorPicker(targetProperty, properties) {\n    return new PropertyFieldColorPickerBuilder(targetProperty, properties);\n}\n//# sourceMappingURL=PropertyFieldColorPicker.js.map","import { MAX_COLOR_ALPHA } from './consts';\nimport { hsv2rgb } from './hsv2rgb';\nimport { hsv2hex } from './hsv2hex';\nimport { _rgbaOrHexString } from './_rgbaOrHexString';\n/**\n * Converts an HSV color (and optional alpha value) to a color object.\n * If `a` is not given, a default of 100 is used.\n * Hex in the returned value will *not* be prefixed with #.\n * If `a` is unspecified or 100, the result's `str` property will contain a hex value\n * (*not* prefixed with #)\n */\nexport function getColorFromHSV(hsv, a) {\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    a = typeof a === 'number' ? a : MAX_COLOR_ALPHA;\n    var _a = hsv2rgb(h, s, v), r = _a.r, g = _a.g, b = _a.b;\n    var hex = hsv2hex(h, s, v);\n    var str = _rgbaOrHexString(r, g, b, a, hex);\n    return { a: a, b: b, g: g, h: h, hex: hex, r: r, s: s, str: str, v: v };\n}\n//# sourceMappingURL=getColorFromHSV.js.map","import { MAX_COLOR_RGBA } from './consts';\nimport { assign } from '../../Utilities';\nimport { hsv2hsl } from './hsv2hsl';\nimport { getColorFromRGBA } from './getColorFromRGBA';\nimport { hsv2rgb } from './hsv2rgb';\n// Soften: to get closer to the background color's luminance\n// (softening with a white background would be lightening, with black it'd be darkening)\n// Strongen: opposite of soften\n// Luminance multiplier constants for generating shades of a given color\nvar WhiteShadeTableBG = [0.027, 0.043, 0.082, 0.145, 0.184, 0.216, 0.349, 0.537]; // white bg\nvar BlackTintTableBG = [0.537, 0.45, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043]; // black bg\nvar WhiteShadeTable = [0.537, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043, 0.027]; // white fg\nvar BlackTintTable = [0.537, 0.45, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043]; // black fg\nvar LumTintTable = [0.88, 0.77, 0.66, 0.55, 0.44, 0.33, 0.22, 0.11]; // light (strongen all)\nvar LumShadeTable = [0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88]; // dark (soften all)\nvar ColorTintTable = [0.96, 0.84, 0.7, 0.4, 0.12]; // default soften\nvar ColorShadeTable = [0.1, 0.24, 0.44]; // default strongen\n// If the given shade's luminance is below/above these values, we'll swap to using the White/Black tables above\nvar LowLuminanceThreshold = 0.2;\nvar HighLuminanceThreshold = 0.8;\n/** Shades of a given color, from softest to strongest. */\nexport var Shade;\n(function (Shade) {\n    Shade[Shade[\"Unshaded\"] = 0] = \"Unshaded\";\n    Shade[Shade[\"Shade1\"] = 1] = \"Shade1\";\n    Shade[Shade[\"Shade2\"] = 2] = \"Shade2\";\n    Shade[Shade[\"Shade3\"] = 3] = \"Shade3\";\n    Shade[Shade[\"Shade4\"] = 4] = \"Shade4\";\n    Shade[Shade[\"Shade5\"] = 5] = \"Shade5\";\n    Shade[Shade[\"Shade6\"] = 6] = \"Shade6\";\n    Shade[Shade[\"Shade7\"] = 7] = \"Shade7\";\n    Shade[Shade[\"Shade8\"] = 8] = \"Shade8\";\n    // remember to update isValidShade()!\n})(Shade || (Shade = {}));\n/**\n * Returns true if the argument is a valid Shade value\n * @param shade - The Shade value to validate.\n */\nexport function isValidShade(shade) {\n    'use strict';\n    return typeof shade === 'number' && shade >= Shade.Unshaded && shade <= Shade.Shade8;\n}\nfunction _isBlack(color) {\n    return color.r === 0 && color.g === 0 && color.b === 0;\n}\nfunction _isWhite(color) {\n    return color.r === MAX_COLOR_RGBA && color.g === MAX_COLOR_RGBA && color.b === MAX_COLOR_RGBA;\n}\nfunction _darken(hsv, factor) {\n    return {\n        h: hsv.h,\n        s: hsv.s,\n        v: _clamp(hsv.v - hsv.v * factor, 0, 100)\n    };\n}\nfunction _lighten(hsv, factor) {\n    return {\n        h: hsv.h,\n        s: _clamp(hsv.s - hsv.s * factor, 0, 100),\n        v: _clamp(hsv.v + (100 - hsv.v) * factor, 0, 100)\n    };\n}\nfunction _clamp(n, min, max) {\n    return n; // Math.max(min, Math.min(n, max));\n}\nexport function isDark(color) {\n    return hsv2hsl(color.h, color.s, color.v).l < 50;\n}\n/**\n * Given a color and a shade specification, generates the requested shade of the color.\n * Logic:\n * if white\n *  darken via tables defined above\n * if black\n *  lighten\n * if light\n *  strongen\n * if dark\n *  soften\n * else default\n *  soften or strongen depending on shade#\n * @param color - The base color whose shade is to be computed\n * @param shade - The shade of the base color to compute\n * @param isInverted - Default false. Whether the given theme is inverted (reverse strongen/soften logic)\n */\nexport function getShade(color, shade, isInverted) {\n    'use strict';\n    if (isInverted === void 0) { isInverted = false; }\n    if (!color) {\n        return null;\n    }\n    if (shade === Shade.Unshaded || !isValidShade(shade)) {\n        return color;\n    }\n    var hsl = hsv2hsl(color.h, color.s, color.v);\n    var hsv = { h: color.h, s: color.s, v: color.v };\n    var tableIndex = shade - 1;\n    var _soften = _lighten;\n    var _strongen = _darken;\n    if (isInverted) {\n        _soften = _darken;\n        _strongen = _lighten;\n    }\n    if (_isWhite(color)) {\n        // white\n        hsv = _darken(hsv, WhiteShadeTable[tableIndex]);\n    }\n    else if (_isBlack(color)) {\n        // black\n        hsv = _lighten(hsv, BlackTintTable[tableIndex]);\n    }\n    else if (hsl.l / 100 > HighLuminanceThreshold) {\n        // light\n        hsv = _strongen(hsv, LumShadeTable[tableIndex]);\n    }\n    else if (hsl.l / 100 < LowLuminanceThreshold) {\n        // dark\n        hsv = _soften(hsv, LumTintTable[tableIndex]);\n    }\n    else {\n        // default\n        if (tableIndex < ColorTintTable.length) {\n            hsv = _soften(hsv, ColorTintTable[tableIndex]);\n        }\n        else {\n            hsv = _strongen(hsv, ColorShadeTable[tableIndex - ColorTintTable.length]);\n        }\n    }\n    return getColorFromRGBA(assign(hsv2rgb(hsv.h, hsv.s, hsv.v), { a: color.a }));\n}\n// Background shades/tints are generated differently. The provided color will be guaranteed\n//   to be the darkest or lightest one. If it is <50% luminance, it will always be the darkest,\n//   otherwise it will always be the lightest.\nexport function getBackgroundShade(color, shade, isInverted) {\n    'use strict';\n    if (isInverted === void 0) { isInverted = false; }\n    if (!color) {\n        return null;\n    }\n    if (shade === Shade.Unshaded || !isValidShade(shade)) {\n        return color;\n    }\n    var hsv = { h: color.h, s: color.s, v: color.v };\n    var tableIndex = shade - 1;\n    if (!isInverted) {\n        // lightish\n        hsv = _darken(hsv, WhiteShadeTableBG[tableIndex]);\n    }\n    else {\n        // default: if (hsl.l / 100 < .5) { // darkish\n        hsv = _lighten(hsv, BlackTintTableBG[BlackTintTable.length - 1 - tableIndex]);\n    }\n    return getColorFromRGBA(assign(hsv2rgb(hsv.h, hsv.s, hsv.v), { a: color.a }));\n}\n/* Calculates the contrast ratio between two colors. Used for verifying\n * color pairs meet minimum accessibility requirements.\n * See: https://www.w3.org/TR/WCAG20/ section 1.4.3\n */\nexport function getContrastRatio(color1, color2) {\n    // Formula defined by: http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html#contrast-ratiodef\n    // relative luminance: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n    /* calculate the intermediate value needed to calculating relative luminance */\n    function _getThing(x) {\n        if (x <= 0.03928) {\n            return x / 12.92;\n        }\n        else {\n            return Math.pow((x + 0.055) / 1.055, 2.4);\n        }\n    }\n    var r1 = _getThing(color1.r / MAX_COLOR_RGBA);\n    var g1 = _getThing(color1.g / MAX_COLOR_RGBA);\n    var b1 = _getThing(color1.b / MAX_COLOR_RGBA);\n    var L1 = 0.2126 * r1 + 0.7152 * g1 + 0.0722 * b1; // relative luminance of first color\n    L1 += 0.05;\n    var r2 = _getThing(color2.r / MAX_COLOR_RGBA);\n    var g2 = _getThing(color2.g / MAX_COLOR_RGBA);\n    var b2 = _getThing(color2.b / MAX_COLOR_RGBA);\n    var L2 = 0.2126 * r2 + 0.7152 * g2 + 0.0722 * b2; // relative luminance of second color\n    L2 += 0.05;\n    // return the lighter color divided by darker\n    return L1 / L2 > 1 ? L1 / L2 : L2 / L1;\n}\n//# sourceMappingURL=shades.js.map","export * from './PropertyFieldColorPicker';\nexport * from './IPropertyFieldColorPicker';\nexport * from './PropertyFieldColorPickerHost';\n//# sourceMappingURL=index.js.map","/* tslint:disable */\nrequire(\"./PropertyFieldColorPickerHost.module.css\");\nvar styles = {\n    pfColorPicker: 'pfColorPicker_f0b6c170',\n    cpInlineTable: 'cpInlineTable_f0b6c170',\n    cpInlineRow: 'cpInlineRow_f0b6c170',\n    disabledCP: 'disabledCP_f0b6c170',\n    hidden: 'hidden_f0b6c170'\n};\nexport default styles;\n/* tslint:enable */ \n//# sourceMappingURL=PropertyFieldColorPickerHost.module.scss.js.map","exports = module.exports = require(\"../../../../../@microsoft/spfx-heft-plugins/node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".pfColorPicker_f0b6c170 .ms-ColorPicker-table{table-layout:fixed;width:100%}.pfColorPicker_f0b6c170 .ms-ColorPicker-table thead>tr>td:first-child{width:28%}.pfColorPicker_f0b6c170 .cpInlineTable_f0b6c170{border-spacing:0;width:100%}.pfColorPicker_f0b6c170 .cpInlineTable_f0b6c170 .cpInlineRow_f0b6c170{vertical-align:top}.pfColorPicker_f0b6c170 .disabledCP_f0b6c170{pointer-events:none;opacity:.4;border:none;padding:0;margin:0}.hidden_f0b6c170{display:none}\", \"\"]);\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as React from 'react';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\nimport { ColorPicker } from 'office-ui-fabric-react/lib/ColorPicker';\nimport { IconButton } from 'office-ui-fabric-react/lib/Button';\nimport styles from './PropertyFieldColorPickerHost.module.scss';\nimport * as strings from 'PropertyControlStrings';\nimport { PropertyFieldColorPickerStyle } from './IPropertyFieldColorPicker';\nimport * as telemetry from '../../common/telemetry';\nvar PropertyFieldColorPickerHost = /** @class */ (function (_super) {\n    __extends(PropertyFieldColorPickerHost, _super);\n    function PropertyFieldColorPickerHost(props, state) {\n        var _this = _super.call(this, props) || this;\n        telemetry.track('PropertyFieldColorPicker', {\n            disabled: props.disabled\n        });\n        _this.state = {\n            errorMessage: undefined,\n            inlinePickerShowing: false\n        };\n        _this.onTogglePicker = _this.onTogglePicker.bind(_this);\n        return _this;\n    }\n    PropertyFieldColorPickerHost.prototype.render = function () {\n        return (React.createElement(\"div\", { className: styles.pfColorPicker + \" \" + (this.props.isHidden ? styles.hidden : \"\") },\n            this.props.label && React.createElement(Label, null, this.props.label),\n            this.props.style === PropertyFieldColorPickerStyle.Inline &&\n                React.createElement(\"table\", { className: styles.cpInlineTable },\n                    React.createElement(\"tbody\", null,\n                        React.createElement(\"tr\", null,\n                            React.createElement(\"td\", { style: { width: \"100%\" } },\n                                this.state.inlinePickerShowing &&\n                                    React.createElement(\"div\", { className: \"ms-slideDownIn20\" },\n                                        React.createElement(ColorPicker, { color: this.props.selectedColor, onColorChanged: this.props.onColorChanged, alphaSliderHidden: this.props.alphaSliderHidden })),\n                                !this.state.inlinePickerShowing &&\n                                    React.createElement(\"div\", { className: \"ms-slideUpIn20 ms-borderColor-neutralDark\", style: { backgroundColor: this.props.selectedColor, border: \"1px solid\" } }, \"\\u00A0\")),\n                            React.createElement(\"td\", { className: styles.cpInlineRow },\n                                React.createElement(IconButton, { title: strings.ColorPickerButtonTitle, disabled: this.props.disabled, iconProps: { iconName: this.props.iconName, ariaLabel: strings.ColorPickerButtonTitle }, onClick: this.onTogglePicker }))))),\n            this.props.style === PropertyFieldColorPickerStyle.Full && !this.props.disabled &&\n                React.createElement(\"div\", null,\n                    React.createElement(\"div\", { style: { width: 0, height: 0, overflow: 'hidden' } },\n                        React.createElement(\"input\", null)),\n                    React.createElement(ColorPicker, { color: this.props.selectedColor, onColorChanged: this.props.onColorChanged, alphaSliderHidden: this.props.alphaSliderHidden })),\n            this.props.style === PropertyFieldColorPickerStyle.Full && this.props.disabled &&\n                React.createElement(\"fieldset\", { disabled: true, className: styles.disabledCP },\n                    React.createElement(ColorPicker, { color: this.props.selectedColor, alphaSliderHidden: this.props.alphaSliderHidden }))));\n    };\n    PropertyFieldColorPickerHost.prototype.onTogglePicker = function () {\n        this.setState({\n            inlinePickerShowing: !this.state.inlinePickerShowing\n        });\n    };\n    return PropertyFieldColorPickerHost;\n}(React.Component));\nexport default PropertyFieldColorPickerHost;\n//# sourceMappingURL=PropertyFieldColorPickerHost.js.map","/**\n * Enum for specifying how the control should be shown\n */\nexport var PropertyFieldColorPickerStyle;\n(function (PropertyFieldColorPickerStyle) {\n    PropertyFieldColorPickerStyle[PropertyFieldColorPickerStyle[\"Full\"] = 1] = \"Full\";\n    PropertyFieldColorPickerStyle[PropertyFieldColorPickerStyle[\"Inline\"] = 2] = \"Inline\";\n})(PropertyFieldColorPickerStyle || (PropertyFieldColorPickerStyle = {}));\n//# sourceMappingURL=IPropertyFieldColorPicker.js.map","export * from './colors';\nexport * from './shades';\nexport * from './consts';\nexport * from './cssColor';\nexport * from './rgb2hex';\nexport * from './clamp';\nexport * from './hsl2rgb';\nexport * from './hsl2hsv';\nexport * from './hsv2rgb';\nexport * from './hsv2hex';\nexport * from './rgb2hsv';\nexport * from './hsv2hsl';\nexport * from './getColorFromString';\nexport * from './getColorFromRGBA';\nexport * from './getColorFromHSV';\nexport * from './getFullColorString';\nexport * from './updateSV';\nexport * from './updateH';\nexport * from './updateRGB';\nexport * from './getColorFromString';\nexport * from './updateA';\nexport * from './correctRGB';\nexport * from './correctHSV';\n//# sourceMappingURL=index.js.map","import { MAX_COLOR_SATURATION, MAX_COLOR_VALUE } from './consts';\n/** Converts HSV components to an HSL color. */\nexport function hsv2hsl(h, s, v) {\n    s /= MAX_COLOR_SATURATION;\n    v /= MAX_COLOR_VALUE;\n    var l = (2 - s) * v;\n    var sl = s * v;\n    sl /= l <= 1 ? l : 2 - l;\n    sl = sl || 0;\n    l /= 2;\n    return { h: h, s: sl * 100, l: l * 100 };\n}\n//# sourceMappingURL=hsv2hsl.js.map","export * from './propertyFields/colorPicker/index';\n//# sourceMappingURL=PropertyFieldColorPicker.js.map","import { getColorFromRGBA } from './getColorFromRGBA';\n/**\n * Gets a color with a single RGBA component updated to a new value.\n * Does not modify the original `color`. Alpha defaults to 100 if not set.\n */\nexport function updateRGB(color, component, value) {\n    return getColorFromRGBA((_a = {\n            r: color.r,\n            g: color.g,\n            b: color.b,\n            a: color.a\n        },\n        _a[component] = value,\n        _a));\n    var _a;\n}\n//# sourceMappingURL=updateRGB.js.map"],"sourceRoot":""}