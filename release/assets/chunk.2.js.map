{"version":3,"sources":["webpack:///.././node_modules/@pnp/spfx-property-controls/lib/helpers/String.extensions.js","webpack:///.././node_modules/@pnp/spfx-property-controls/lib/helpers/Constants.js","webpack:///.././node_modules/@pnp/spfx-property-controls/lib/helpers/GeneralHelper.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA;AACA;AACA,kHAAkH,2DAAgB;AAClnHA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;AC1GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACoB;AACC;AAC3C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+DAAgB,2CAA2C,+DAAgB;AAC/G;AACA;AACA,oCAAoC,+DAAgB,4CAA4C,+DAAgB;AAChH;AACA;AACA,4EAA4E,+DAAgB,wCAAwC,+DAAgB,4CAA4C,+DAAgB,iDAAiD,+DAAgB;AACjR;AACA;AACA,oCAAoC,+DAAgB,2CAA2C,+DAAgB;AAC/G;AACA;AACA;AACA,wCAAwC,+DAAgB,kCAAkC,+DAAgB;AAC1G;AACA;AACA,oDAAoD,+DAAgB,yCAAyC,+DAAgB;AAC7H;AACA;AACA;AACA,4EAA4E,+DAAgB,sCAAsC,+DAAgB,0CAA0C,+DAAgB,+CAA+C,+DAAgB;AAC3Q;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,+DAAgB;AACzD;AACA;AACA;AACA,4EAA4E,+DAAgB,qCAAqC,+DAAgB,yCAAyC,+DAAgB,8CAA8C,+DAAgB;AACxQ;AACA;AACA,yBAAyB,+DAAgB;AACzC;AACA;AACA,kDAAkD,EAAE;AACpD;AACA,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG,iDAAiD;AAClJ;AACA;AACA;AACA;AACA,6EAA6E,iCAAimBAAmB,oEAAqB;AACxC;AACA;AACA;AACA;AACA,wEAAwE,+DAAgB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB,uBAAuB;AACvB,wBAAwB;AACxB,uBAAuB;AACvB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,CAAC;AACwB;AAClB;AACP;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,QAAQ,+DAAK;AACb;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,+DAAK;AAChB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,yC","file":"chunk.2.js","sourcesContent":["import { InvariantCulture } from './Constants';\n/**\n * Parses number in invariant culture\n */\nString.prototype.parseNumberInvariant = function () {\n    return this._parseNumber((window.Sys && window.Sys.CultureInfo && window.Sys.CultureInfo.InvariantCulture) || InvariantCulture);\n};\n/**\n * Parses number in provided culture\n */\nString.prototype._parseNumber = function (culture) {\n    var str = '' + this;\n    str = str.trim();\n    if (str.match(/^[+-]?infinity$/i)) {\n        return parseFloat(str);\n    }\n    if (str.match(/^0x[a-f0-9]+$/i)) {\n        return parseInt(str);\n    }\n    var numberFormat = culture.numberFormat;\n    var patternParsed = str._parseNumberNegativePattern(numberFormat, numberFormat.NumberNegativePattern);\n    var symbol = patternParsed[0];\n    var digit = patternParsed[1];\n    if (symbol === '' && numberFormat.NumberNegativePattern !== 1) {\n        patternParsed = str._parseNumberNegativePattern(numberFormat, 1);\n        symbol = patternParsed[0];\n        digit = patternParsed[1];\n    }\n    if (symbol === '') {\n        symbol = '+';\n    }\n    var exponent;\n    var base;\n    var scientificSymbolIndex = digit.indexOf('e');\n    if (scientificSymbolIndex < 0) {\n        scientificSymbolIndex = digit.indexOf('E');\n    }\n    if (scientificSymbolIndex < 0) {\n        base = digit;\n        exponent = null;\n    }\n    else {\n        base = digit.substr(0, scientificSymbolIndex);\n        exponent = digit.substr(scientificSymbolIndex + 1);\n    }\n    var intPart;\n    var fractionalPart;\n    var decimalSeparatorIdx = base.indexOf(numberFormat.NumberDecimalSeparator);\n    if (decimalSeparatorIdx < 0) {\n        intPart = base;\n        fractionalPart = null;\n    }\n    else {\n        intPart = base.substr(0, decimalSeparatorIdx);\n        fractionalPart = base.substr(decimalSeparatorIdx + numberFormat.NumberDecimalSeparator.length);\n    }\n    intPart = intPart.split(numberFormat.NumberGroupSeparator).join('');\n    var n = numberFormat.NumberGroupSeparator.replace(/\\u00A0/g, ' ');\n    if (numberFormat.NumberGroupSeparator !== n) {\n        intPart = intPart.split(n).join('');\n    }\n    var result = symbol + intPart;\n    if (fractionalPart !== null) {\n        result += '.' + fractionalPart;\n    }\n    if (exponent !== null) {\n        var exponentParsed = exponent._parseNumberNegativePattern(numberFormat, 1);\n        if (exponentParsed[0] === '') {\n            exponentParsed[0] = '+';\n        }\n        result += 'e' + exponentParsed[0] + exponentParsed[1];\n    }\n    if (result.match(/^[+-]?\\d*\\.?\\d*(e[+-]?\\d+)?$/)) {\n        return parseFloat(result);\n    }\n    return Number.NaN;\n};\n/**\n * Internal method, Microsoft's replica to parse FriendlyFormat of date or digit\n */\nString.prototype._parseNumberNegativePattern = function (numberFormat, pattern) {\n    var negativeSign = numberFormat.NegativeSign;\n    var positiveSign = numberFormat.PositiveSign;\n    switch (pattern) {\n        case 4:\n            negativeSign = ' ' + negativeSign;\n            positiveSign = ' ' + positiveSign;\n            break;\n        case 3:\n            if (this.endsWith(negativeSign)) {\n                return ['-', this.substr(0, this.length - negativeSign.length)];\n            }\n            else if (this.endsWith(positiveSign)) {\n                return ['+', this.substr(0, this.length - positiveSign.length)];\n            }\n            break;\n        case 2:\n            negativeSign += ' ';\n            positiveSign += ' ';\n            break;\n        case 1:\n            if (this.startsWith(negativeSign)) {\n                return ['-', this.substr(negativeSign.length)];\n            }\n            else if (this.startsWith(positiveSign)) {\n                return ['+', this.substr(positiveSign.length)];\n            }\n            break;\n        case 0:\n            if (this.startsWith('(') && this.endsWith(')')) {\n                return ['-', this.substr(1, this.length - 2)];\n            }\n    }\n    return ['', this];\n};\n//# sourceMappingURL=String.extensions.js.map","/**\n * Key that is used to store loaded fields in sessionStorage\n */\nexport var LoadedViewFieldsKey = 'LBLoadedViewFields';\n/**\n * Mapping between current field name and the name of the real field that contains the data\n */\nexport var FieldNamesMapping = {\n    'Title': {\n        'storedName': 'Title'\n    },\n    'LinkTitle': {\n        'storedName': 'Title'\n    },\n    'LinkTitleNoMenu': {\n        'storedName': 'Title'\n    },\n    'LinkFilename': {\n        'storedName': 'FileLeafRef'\n    },\n    'LinkFileNameNoMenu': {\n        'storedName': 'FileLeafRef'\n    },\n    'FileLeafRef': {\n        'storedName': 'FileLeafRef'\n    },\n    'URL': {\n        'storedName': 'URL'\n    },\n    'URLwMenu': {\n        'storedName': 'URL'\n    }\n};\n/**\n * Invariant Culture\n */\nexport var InvariantCulture = {\n    name: '',\n    numberFormat: {\n        CurrencyDecimalDigits: 2,\n        CurrencyDecimalSeparator: '.',\n        IsReadOnly: true,\n        CurrencyGroupSizes: [3],\n        NumberGroupSizes: [3],\n        PercentGroupSizes: [3],\n        CurrencyGroupSeparator: ',',\n        CurrencySymbol: '¤',\n        NaNSymbol: 'NaN',\n        CurrencyNegativePattern: 0,\n        NumberNegativePattern: 1,\n        PercentPositivePattern: 0,\n        PercentNegativePattern: 0,\n        NegativeInfinitySymbol: '-Infinity',\n        NegativeSign: '-',\n        NumberDecimalDigits: 2,\n        NumberDecimalSeparator: '.',\n        NumberGroupSeparator: ',',\n        CurrencyPositivePattern: 0,\n        PositiveInfinitySymbol: 'Infinity',\n        PositiveSign: '+',\n        PercentDecimalDigits: 2,\n        PercentDecimalSeparator: '.',\n        PercentGroupSeparator: ',',\n        PercentSymbol: '%',\n        PerMilleSymbol: '‰',\n        NativeDigits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n        DigitSubstitution: 1\n    },\n    dateTimeFormat: {\n        AMDesignator: 'AM',\n        Calendar: {\n            MinSupportedDateTime: '@-62135568000000@',\n            MaxSupportedDateTime: '@253402300799999@',\n            AlgorithmType: 1,\n            CalendarType: 1,\n            Eras: [1],\n            TwoDigitYearMax: 2029,\n            IsReadOnly: true\n        },\n        DateSeparator: '/',\n        FirstDayOfWeek: 0,\n        CalendarWeekRule: 0,\n        FullDateTimePattern: 'dddd, dd MMMM yyyy HH:mm:ss',\n        LongDatePattern: 'dddd, dd MMMM yyyy',\n        LongTimePattern: 'HH:mm:ss',\n        MonthDayPattern: 'MMMM dd',\n        PMDesignator: 'PM',\n        RFC1123Pattern: 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n        ShortDatePattern: 'MM/dd/yyyy',\n        ShortTimePattern: 'HH:mm',\n        SortableDateTimePattern: 'yyyy\\'-\\'MM\\'-\\'dd\\'T\\'HH\\':\\'mm\\':\\'ss',\n        TimeSeparator: ':',\n        UniversalSortableDateTimePattern: 'yyyy\\'-\\'MM\\'-\\'dd HH\\':\\'mm\\':\\'ss\\'Z\\'',\n        YearMonthPattern: 'yyyy MMMM',\n        AbbreviatedDayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n        ShortestDayNames: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n        DayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n        AbbreviatedMonthNames: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', ''],\n        MonthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', ''],\n        IsReadOnly: true,\n        NativeCalendarName: 'Gregorian Calendar',\n        AbbreviatedMonthGenitiveNames: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', ''],\n        MonthGenitiveNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', ''],\n        eras: [1, 'A.D.', null, 0]\n    }\n};\n//# sourceMappingURL=Constants.js.map","import './String.extensions';\nimport * as _ from '@microsoft/sp-lodash-subset';\nimport * as strings from 'PropertyControlStrings';\nexport var IMG_SUPPORTED_EXTENSIONS = \".gif,.jpg,.jpeg,.bmp,.dib,.tif,.tiff,.ico,.png,.jxr,.svg\";\n/**\n * Helper with general methods to simplify some routines\n */\nvar GeneralHelper = /** @class */ (function () {\n    function GeneralHelper() {\n    }\n    /**\n     * Trims slash at the end of URL if needed\n     * @param url URL\n     */\n    GeneralHelper.trimSlash = function (url) {\n        if (url.lastIndexOf('/') === url.length - 1)\n            return url.slice(0, -1);\n        return url;\n    };\n    /**\n     * Encodes text\n     * @param text text to encode\n     */\n    GeneralHelper.encodeText = function (text) {\n        var n = /[<>&'\"\\\\]/g;\n        return text ? text.replace(n, this._getEncodedChar) : '';\n    };\n    /**\n     * Copy of Microsoft's GetRelativeDateTimeString from SP.dateTimeUtil\n     */\n    GeneralHelper.getRelativeDateTimeString = function (format) {\n        var formatParts = format.split('|');\n        var result = null;\n        var placeholdersString = null;\n        if (formatParts[0] === '0')\n            return format.substring(2);\n        var isFuture = formatParts[1] === '1';\n        var formatType = formatParts[2];\n        var timeString = formatParts.length >= 4 ? formatParts[3] : null;\n        var dayString = formatParts.length >= 5 ? formatParts[4] : null;\n        switch (formatType) {\n            case '1':\n                result = isFuture ? strings.DateTime['L_RelativeDateTime_AFewSecondsFuture'] : strings.DateTime['L_RelativeDateTime_AFewSeconds'];\n                break;\n            case '2':\n                result = isFuture ? strings.DateTime['L_RelativeDateTime_AboutAMinuteFuture'] : strings.DateTime['L_RelativeDateTime_AboutAMinute'];\n                break;\n            case '3':\n                placeholdersString = this.getLocalizedCountValue(isFuture ? strings.DateTime['L_RelativeDateTime_XMinutesFuture'] : strings.DateTime['L_RelativeDateTime_XMinutes'], isFuture ? strings.DateTime['L_RelativeDateTime_XMinutesFutureIntervals'] : strings.DateTime['L_RelativeDateTime_XMinutesIntervals'], Number(timeString));\n                break;\n            case '4':\n                result = isFuture ? strings.DateTime['L_RelativeDateTime_AboutAnHourFuture'] : strings.DateTime['L_RelativeDateTime_AboutAnHour'];\n                break;\n            case '5':\n                if (timeString === null) {\n                    result = isFuture ? strings.DateTime['L_RelativeDateTime_Tomorrow'] : strings.DateTime['L_RelativeDateTime_Yesterday'];\n                }\n                else {\n                    placeholdersString = isFuture ? strings.DateTime['L_RelativeDateTime_TomorrowAndTime'] : strings.DateTime['L_RelativeDateTime_YesterdayAndTime'];\n                }\n                break;\n            case '6':\n                placeholdersString = this.getLocalizedCountValue(isFuture ? strings.DateTime['L_RelativeDateTime_XHoursFuture'] : strings.DateTime['L_RelativeDateTime_XHours'], isFuture ? strings.DateTime['L_RelativeDateTime_XHoursFutureIntervals'] : strings.DateTime['L_RelativeDateTime_XHoursIntervals'], Number(timeString));\n                break;\n            case '7':\n                if (dayString === null) {\n                    result = timeString;\n                }\n                else {\n                    placeholdersString = strings.DateTime['L_RelativeDateTime_DayAndTime'];\n                }\n                break;\n            case '8':\n                placeholdersString = this.getLocalizedCountValue(isFuture ? strings.DateTime['L_RelativeDateTime_XDaysFuture'] : strings.DateTime['L_RelativeDateTime_XDays'], isFuture ? strings.DateTime['L_RelativeDateTime_XDaysFutureIntervals'] : strings.DateTime['L_RelativeDateTime_XDaysIntervals'], Number(timeString));\n                break;\n            case '9':\n                result = strings.DateTime['L_RelativeDateTime_Today'];\n        }\n        if (placeholdersString !== null) {\n            result = placeholdersString.replace(\"{0}\", timeString);\n            if (dayString !== null) {\n                result = result.replace(\"{1}\", dayString);\n            }\n        }\n        return result;\n    };\n    /**\n     * Copy of Microsoft's GetLocalizedCountValue from SP.dateTimeUtil.\n     * I've tried to rename all the vars to have meaningful names... but some were too unclear\n     */\n    GeneralHelper.getLocalizedCountValue = function (format, first, second) {\n        if (format === undefined || first === undefined || second === undefined)\n            return null;\n        var result = '';\n        var a = -1;\n        var firstOperandOptions = first.split('||');\n        for (var firstOperandOptionsIdx = 0, firstOperandOptionsLen = firstOperandOptions.length; firstOperandOptionsIdx < firstOperandOptionsLen; firstOperandOptionsIdx++) {\n            var firstOperandOption = firstOperandOptions[firstOperandOptionsIdx];\n            if (firstOperandOption === null || firstOperandOption === '')\n                continue;\n            var optionParts = firstOperandOption.split(',');\n            for (var optionPartsIdx = 0, optionPartsLen = optionParts.length; optionPartsIdx < optionPartsLen; optionPartsIdx++) {\n                var optionPart = optionParts[optionPartsIdx];\n                if (optionPart === null || optionPart === '')\n                    continue;\n                if (isNaN(optionPart.parseNumberInvariant())) {\n                    var dashParts = optionPart.split('-');\n                    if (dashParts === null || dashParts.length !== 2)\n                        continue;\n                    var j = void 0, n = void 0;\n                    if (dashParts[0] === '')\n                        j = 0;\n                    else if (isNaN(dashParts[0].parseNumberInvariant()))\n                        continue;\n                    else\n                        j = parseInt(dashParts[0]);\n                    if (second >= j) {\n                        if (dashParts[1] === '') {\n                            a = firstOperandOptionsIdx;\n                            break;\n                        }\n                        else if (isNaN(dashParts[1].parseNumberInvariant()))\n                            continue;\n                        else\n                            n = parseInt(dashParts[1]);\n                        if (second <= n) {\n                            a = firstOperandOptionsIdx;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    var p = parseInt(optionPart);\n                    if (second === p) {\n                        a = firstOperandOptionsIdx;\n                        break;\n                    }\n                }\n            }\n            if (a !== -1)\n                break;\n        }\n        if (a !== -1) {\n            var e = format.split('||');\n            if (e !== null && e[a] !== null && e[a] !== '')\n                result = e[a];\n        }\n        return result;\n    };\n    /**\n     * Extracts text from HTML strings without creating HTML elements\n     * @param html HTML string\n     */\n    GeneralHelper.getTextFromHTML = function (html) {\n        var result = html;\n        var oldResult = result;\n        var tagBody = '(?:[^\"\\'>]|\"[^\"]*\"|\\'[^\\']*\\')*';\n        var tagOrComment = new RegExp('<(?:'\n            // Comment body.\n            + '!--(?:(?:-*[^->])*--+|-?)'\n            // Special \"raw text\" elements whose content should be elided.\n            + '|script\\\\b' + tagBody + '>[\\\\s\\\\S]*?</script\\\\s*'\n            + '|style\\\\b' + tagBody + '>[\\\\s\\\\S]*?</style\\\\s*'\n            // Regular name\n            + '|/?[a-z]'\n            + tagBody\n            + ')>', 'gi');\n        do {\n            oldResult = result;\n            result = result.replace(tagOrComment, '');\n        } while (result !== result);\n        return result;\n    };\n    /**\n     * Checks if value is defined (not null and not undefined)\n     * @param value value\n     */\n    GeneralHelper.isDefined = function (value) {\n        return typeof value !== 'undefined' && value !== null;\n    };\n    /**\n     * Creates Document element based on Xml string\n     * @param xmlString XML string to parse\n     */\n    GeneralHelper.parseXml = function (xmlString) {\n        var parser = new DOMParser();\n        var xml = parser.parseFromString(xmlString, 'text/xml');\n        return xml;\n    };\n    /**\n     * Returns absoulute domain URL.\n     * @param url\n     */\n    GeneralHelper.getAbsoluteDomainUrl = function (url) {\n        if (url !== undefined) {\n            var myURL = new URL(url.toLowerCase());\n            return myURL.protocol + \"//\" + myURL.host;\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * To support IE11 that has no support for File constructor\n     * @param blob\n     */\n    GeneralHelper.getFileFromBlob = function (blob, fileName) {\n        var result = null;\n        // IE 11 foesn't support File API, create a workaround to return Blob with fileName assigned.\n        try {\n            result = new File([blob], fileName);\n        }\n        catch (ieErr) {\n            result = blob;\n            result.fileName = fileName;\n        }\n        return result;\n    };\n    GeneralHelper.formatBytes = function (bytes, decimals) {\n        if (bytes === 0) {\n            return strings.EmptyFileSize;\n        }\n        var k = 1024;\n        var dm = decimals <= 0 ? 0 : decimals || 2;\n        var i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + strings.SizeUnit[i];\n    };\n    /**\n     * Returns file name without extension.\n     */\n    GeneralHelper.getFileNameWithoutExtension = function (itemUrl) {\n        var fileNameWithExtension = GeneralHelper.getFileNameFromUrl(itemUrl);\n        var fileNameTokens = fileNameWithExtension.split(\".\");\n        var fileName = fileNameTokens[0];\n        return fileName;\n    };\n    /**\n     * Returns file name with the extension\n     */\n    GeneralHelper.getFileNameFromUrl = function (itemUrl) {\n        var urlTokens = itemUrl.split(\"?\");\n        var url = urlTokens[0];\n        var tokens = url.split(\"/\");\n        var fileNameWithExtension = tokens[tokens.length - 1];\n        return fileNameWithExtension;\n    };\n    GeneralHelper.isImage = function (fileName) {\n        var acceptableExtensions = IMG_SUPPORTED_EXTENSIONS.split(\",\");\n        var thisExtension = GeneralHelper.getFileExtension(fileName);\n        return acceptableExtensions.indexOf(thisExtension) > -1;\n    };\n    /**\n     * Returns extension of the file\n     */\n    GeneralHelper.getFileExtension = function (fileName) {\n        // Split the URL on the dots\n        var splitFileName = fileName.toLowerCase().split('.');\n        // Take the last value\n        var extensionValue = splitFileName.pop();\n        // Check if there are query string params in place\n        if (extensionValue.indexOf('?') !== -1) {\n            // Split the string on the question mark and return the first part\n            var querySplit = extensionValue.split('?');\n            extensionValue = querySplit[0];\n        }\n        return \".\" + extensionValue;\n    };\n    GeneralHelper._getEncodedChar = function (c) {\n        var o = {\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            \"&\": \"&amp;\",\n            '\"': \"&quot;\",\n            \"'\": \"&#39;\",\n            \"\\\\\": \"&#92;\"\n        };\n        return o[c];\n    };\n    return GeneralHelper;\n}());\nexport { GeneralHelper };\nexport var setPropertyValue = function (properties, targetProperty, value) {\n    if (!properties) {\n        return;\n    }\n    if (targetProperty.indexOf('.') === -1) { // simple prop\n        properties[targetProperty] = value;\n    }\n    else {\n        _.set(properties, targetProperty, value);\n    }\n};\nexport var getPropertyValue = function (properties, targetProperty) {\n    if (!properties) {\n        return undefined;\n    }\n    if (targetProperty.indexOf('.') === -1) {\n        return properties[targetProperty];\n    }\n    return _.get(properties, targetProperty);\n};\nexport var toRelativeUrl = function (absoluteUrl) {\n    if (!absoluteUrl) {\n        return '';\n    }\n    return absoluteUrl.replace(/^(?:\\/\\/|[^/]+)*\\//, '/');\n};\n//# sourceMappingURL=GeneralHelper.js.map"],"sourceRoot":""}